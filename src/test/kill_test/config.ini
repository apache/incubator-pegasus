; Licensed to the Apache Software Foundation (ASF) under one
; or more contributor license agreements.  See the NOTICE file
; distributed with this work for additional information
; regarding copyright ownership.  The ASF licenses this file
; to you under the Apache License, Version 2.0 (the
; "License"); you may not use this file except in compliance
; with the License.  You may obtain a copy of the License at
;
;   http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing,
; software distributed under the License is distributed on an
; "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
; KIND, either express or implied.  See the License for the
; specific language governing permissions and limitations
; under the License.
[apps..default]
run = true
count = 1
;network.client.RPC_CHANNEL_TCP = dsn::tools::sim_network_provider, 65536
;network.client.RPC_CHANNEL_UDP = dsn::tools::sim_network_provider, 65536
;network.server.0.RPC_CHANNEL_TCP = NET_HDR_DSN, dsn::tools::sim_network_provider, 65536

[apps.mimic]
name = mimic
type = dsn.app.mimic
arguments =
pools = THREAD_POOL_DEFAULT, THREAD_POOL_META_SERVER
run = true
count = 1

[core]
;tool = simulator
tool = nativerun
;toollets = tracer
;toollets = tracer, profiler, fault_injector
pause_on_start = false

logging_start_level = LOG_LEVEL_INFO
logging_factory_name = dsn::tools::simple_logger
;logging_factory_name = dsn::tools::screen_logger
logging_flush_on_exit = true

enable_default_app_mimic = true

data_dir = ./data

[tools.simple_logger]
short_header = false
fast_flush = true
max_number_of_log_files_on_disk = 1000
stderr_start_level = LOG_LEVEL_FATAL

[tools.simulator]
random_seed = 0

[network]
; how many network threads for network library(used by asio)
io_service_worker_count = 4

; specification for each thread pool
[threadpool..default]
worker_count = 4

[threadpool.THREAD_POOL_DEFAULT]
name = default
partitioned = false
worker_priority = THREAD_xPRIORITY_NORMAL
worker_count = 8

[task..default]
is_trace = false
is_profile = false
allow_inline = false
rpc_call_channel = RPC_CHANNEL_TCP
rpc_call_header_format = NET_HDR_DSN
rpc_timeout_milliseconds = 5000

[pegasus.killtest]
killer_handler = shell
pegasus_cluster_name = onebox

; total number of meta/replica/zookeeper jobs
total_meta_count = @META_COUNT@
total_replica_count = @REPLICA_COUNT@
total_zookeeper_count = @ZK_COUNT@

; unit seconds, sleep time for recover
sleep_time_before_recover_seconds = 60
; unit seconds, kill inerval, must > 20s
kill_interval_seconds = 300
; the max time for all the partitions of the table become to healthy status, unit seconds
max_seconds_for_all_partitions_to_recover = 600

; the max number that can be killed of replica/meta/zookeeper
kill_meta_max_count = 0
kill_replica_max_count = 1
kill_zookeeper_max_count = 0
; log file that record the action of kill
kill_log_file = ./kill_history.txt

verify_app_name = @APP_NAME@
; unit milliseconds, timeout for set/get operation, must >= (sleep_time_for_recover * 1000 + 3000)
set_and_get_timeout_milliseconds = 9000
; number of the set client
set_thread_count = @SET_THREAD_COUNT@
; number of the get client
get_thread_count = @GET_THREAD_COUNT@

[killer.handler.shell]
; using run.sh script to kill/recover the jobs, just for testing onebox
; path to the folder that contain run.sh script
onebox_run_path = @ONEBOX_RUN_PATH@

[pegasus.clusters]
onebox = @LOCAL_HOSTNAME@:34601,@LOCAL_HOSTNAME@:34602,@LOCAL_HOSTNAME@:34603
mycluster = @LOCAL_HOSTNAME@:34601,@LOCALOCAL_HOSTNAMEL_IP@:34602,@LOCAL_HOSTNAME@:34603

