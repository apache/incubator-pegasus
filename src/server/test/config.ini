; Licensed to the Apache Software Foundation (ASF) under one
; or more contributor license agreements.  See the NOTICE file
; distributed with this work for additional information
; regarding copyright ownership.  The ASF licenses this file
; to you under the Apache License, Version 2.0 (the
; "License"); you may not use this file except in compliance
; with the License.  You may obtain a copy of the License at
;
;   http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing,
; software distributed under the License is distributed on an
; "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
; KIND, either express or implied.  See the License for the
; specific language governing permissions and limitations
; under the License.
[apps..default]
run = true
count = 1
;network.client.RPC_CHANNEL_TCP = dsn::tools::sim_network_provider, 65536
;network.client.RPC_CHANNEL_UDP = dsn::tools::sim_network_provider, 65536
;network.server.0.RPC_CHANNEL_TCP = dsn::tools::sim_network_provider, 65536

[apps.replica]
type = replica
name = replica
arguments =
ports = @REPLICA_PORT@
pools = THREAD_POOL_DEFAULT,THREAD_POOL_REPLICATION_LONG,THREAD_POOL_REPLICATION,THREAD_POOL_FD,THREAD_POOL_LOCAL_APP,THREAD_POOL_BLOCK_SERVICE,THREAD_POOL_COMPACT,THREAD_POOL_SLOG,THREAD_POOL_PLOG
run = true
count = 1

[core]
;tool = simulator
tool = nativerun
toollets = profiler
;toollets = tracer, profiler, fault_injector
pause_on_start = false

logging_start_level = LOG_LEVEL_DEBUG
logging_factory_name = dsn::tools::simple_logger
;logging_factory_name = dsn::tools::screen_logger
logging_flush_on_exit = true

[block_service.fds_service]
type = fds_service
args = <server-address> <secret-key> <secret-access> <bucket-name>

[block_service.local_service]
type = local_service
args =

[tools.simple_logger]
short_header = false
fast_flush = false
max_number_of_log_files_on_disk = 100000
stderr_start_level = LOG_LEVEL_FATAL

[tools.simulator]
random_seed = 0

[network]
; how many network threads for network library(used by asio)
io_service_worker_count = 4

; specification for each thread pool
[threadpool..default]
worker_count = 4

[threadpool.THREAD_POOL_DEFAULT]
name = default
partitioned = false
worker_priority = THREAD_xPRIORITY_NORMAL
worker_count = 8

[threadpool.THREAD_POOL_SLOG]
  name = slog
  worker_count = 1

[threadpool.THREAD_POOL_PLOG]
  name = plog
  partitioned = true
  worker_count = 4

[threadpool.THREAD_POOL_REPLICATION]
name = replica
partitioned = true
worker_priority = THREAD_xPRIORITY_NORMAL
worker_count = 10

[threadpool.THREAD_POOL_DLOCK]
name = dist_lock
partitioned = true
worker_priority = THREAD_xPRIORITY_NORMAL
worker_count = 1

[threadpool.THREAD_POOL_FD]
name = fd
partitioned = false
worker_priority = THREAD_xPRIORITY_NORMAL
worker_count = 2

[threadpool.THREAD_POOL_LOCAL_APP]
name = local_app
partitioned = false
worker_priority = THREAD_xPRIORITY_NORMAL
worker_count = 8

[threadpool.THREAD_POOL_REPLICATION_LONG]
name = rep_long
partitioned = false
worker_priority = THREAD_xPRIORITY_NORMAL
worker_count = 4

[threadpool.THREAD_POOL_BLOCK_SERVICE]
name = block_service
worker_count = 1

[task..default]
is_trace = false
is_profile = false
allow_inline = false
rpc_call_header_format = NET_HDR_DSN
rpc_call_channel = RPC_CHANNEL_TCP
rpc_timeout_milliseconds = 5000

disk_write_fail_ratio = 0.0
disk_read_fail_ratio = 0.0

perf_test_rounds = 1000
perf_test_payload_bytes = 1024
perf_test_timeouts_ms = 10000
; perf_test_concurrent_count is used only when perf_test_concurrent is true:
;   - if perf_test_concurrent_count == 0, means concurrency grow exponentially.
;   - if perf_test_concurrent_count >  0, means concurrency maintained to a fixed number.
perf_test_concurrent = true
perf_test_concurrent_count = 20

[replication.app]
app_name = @APP_NAME@
app_type = pegasus
partition_count = @PARTITION_COUNT@
max_replica_count = 3
stateful = true

[replication]
data_dirs_black_list_file = /home/mi/.pegasus_data_dirs_black_list
cluster_name = onebox

deny_client_on_start = false
delay_for_fd_timeout_on_start = false
verbose_log_on_commit = false
empty_write_disabled = false

prepare_timeout_ms_for_secondaries = 1000
prepare_timeout_ms_for_potential_secondaries = 3000

batch_write_disabled = false
staleness_for_commit = 20
max_mutation_count_in_prepare_list = 110
mutation_2pc_min_replica_count = 2

group_check_disabled = false
group_check_interval_ms = 100000

checkpoint_disabled = false
checkpoint_interval_seconds = 100
checkpoint_min_decree_gap = 10000
checkpoint_max_interval_hours = 1

gc_disabled = false
gc_interval_ms = 30000
gc_memory_replica_interval_ms = 300000
gc_disk_error_replica_interval_seconds = 172800000

fd_disabled = false
fd_check_interval_seconds = 5
fd_beacon_interval_seconds = 3
fd_lease_seconds = 20
fd_grace_seconds = 22

log_private_file_size_mb = 32
log_private_batch_buffer_kb = 512
log_private_batch_buffer_count = 512
log_private_batch_buffer_flush_interval_ms = 100000
log_private_reserve_max_size_mb = 0
log_private_reserve_max_time_seconds = 0

log_shared_file_size_mb = 32
log_shared_file_count_limit = 32
log_shared_batch_buffer_kb = 0
log_shared_force_flush = false

config_sync_disabled = false
config_sync_interval_ms = 30000

lb_interval_ms = 10000

;; the prefix of the path that to save backup-data on cold backup media
;; recommand using cluster name as the root
cold_backup_root = onebox
;; upper limit that concurrent uploading file to cold backup media count
max_concurrent_uploading_file_count = 5

[pegasus.server]
rocksdb_verbose_log = false
rocksdb_write_buffer_size = 10485760
verify_timetag = true

perf_counter_cluster_name = onebox
perf_counter_update_interval_seconds = 10
perf_counter_enable_logging = false
perf_counter_enable_falcon = false

falcon_host = 127.0.0.1
falcon_port = 1988
falcon_path = /v1/push

hot_bucket_variance_threshold = 5
hot_key_variance_threshold = 5

[components.pegasus_perf_counter_number_percentile_atomic]
counter_computation_interval_seconds = 10

[zookeeper]
hosts_list = 127.0.0.1:22181
timeout_ms = 60000
logfile = zoo.log

;; configs for profiler
[task.RPC_NFS_COPY]
is_profile = true
profiler::inqueue = false
profiler::queue = false
profiler::exec = false
profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_NFS_COPY_ACK]
is_profile = true
profiler::inqueue = false
profiler::queue = false
profiler::exec = false
profiler::qps = false
;profiler::cancelled = false
;profiler::latency.client = false
;profiler::timeout.qps = false

[task.LPC_NFS_READ]
is_profile = true
profiler::inqueue = false
profiler::queue = false
profiler::exec = false
profiler::qps = false
profiler::cancelled = false
;profiler::latency = false

[task.LPC_NFS_WRITE]
is_profile = true
profiler::inqueue = false
profiler::queue = false
profiler::exec = false
profiler::qps = false
profiler::cancelled = false
;profiler::latency = false

[task.LPC_NFS_COPY_FILE]
is_profile = true
profiler::inqueue = false
profiler::queue = false
profiler::exec = false
profiler::qps = false
profiler::cancelled = false
;profiler::latency = false

[task.LPC_DELAY_RPC_REQUEST_RATE]
is_profile = true
;profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
;profiler::cancelled = false

[task.RPC_L2_CLIENT_READ]
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
;profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_L2_CLIENT_WRITE]
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
;profiler::cancelled = false
;profiler::latency.server = false

[task.LPC_AIO_BATCH_WRITE]
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
;profiler::cancelled = false
;profiler::latency = false

[task.LPC_AIO_IMMEDIATE_CALLBACK]
is_trace = false
allow_inline = false
is_profile = true
profiler::inqueue = false
profiler::queue = false
;profiler::exec = false
profiler::qps = false
profiler::cancelled = false
;profiler::latency = false

[task.LPC_WRITE_REPLICATION_LOG_COMMON]
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency = false

[task.LPC_WRITE_REPLICATION_LOG]
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency = false

[task.RPC_PREPARE]
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_PREPARE_ACK]
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
;profiler::cancelled = false
;profiler::latency.client = false
;profiler::timeout.qps = false

[task.RPC_RRDB_RRDB_PUT]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_RRDB_RRDB_PUT_ACK]
is_profile = true

[task.RPC_RRDB_RRDB_MULTI_PUT]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_RRDB_RRDB_MULTI_PUT_ACK]
is_profile = true

[task.RPC_RRDB_RRDB_REMOVE]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_RRDB_RRDB_REMOVE_ACK]
is_profile = true

[task.RPC_RRDB_RRDB_MULTI_REMOVE]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_RRDB_RRDB_MULTI_REMOVE_ACK]
is_profile = true

[task.RPC_RRDB_RRDB_DUPLICATE]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_RRDB_RRDB_DUPLICATE_ACK]
is_profile = true

[task.RPC_RRDB_RRDB_BATCHED_DUPLICATE]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_RRDB_RRDB_BATCHED_DUPLICATE_ACK]
is_profile = true

[task.RPC_RRDB_RRDB_GET]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
;profiler::qps = false
profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_RRDB_RRDB_GET_ACK]
is_profile = true

[task.RPC_RRDB_RRDB_MULTI_GET]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
[task.RPC_RRDB_RRDB_SORTKEY_COUNT]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
[task.RPC_RRDB_RRDB_TTL]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
[task.RPC_RRDB_RRDB_GET_SCANNER]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
[task.RPC_RRDB_RRDB_SCAN]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000
[task.RPC_RRDB_RRDB_CLEAR_SCANNER]
rpc_request_throttling_mode = TM_DELAY
rpc_request_delays_milliseconds = 1000, 1000, 1000, 1000, 1000, 10000

[task.RPC_FD_FAILURE_DETECTOR_PING]
is_trace = false
rpc_call_header_format = NET_HDR_DSN
rpc_call_channel = RPC_CHANNEL_UDP
rpc_message_crc_required = true
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
profiler::qps = false
;profiler::cancelled = false
;profiler::latency.server = false

[task.RPC_FD_FAILURE_DETECTOR_PING_ACK]
is_trace = false
rpc_call_header_format = NET_HDR_DSN
rpc_call_channel = RPC_CHANNEL_UDP
rpc_message_crc_required = true
is_profile = true
profiler::inqueue = false
;profiler::queue = false
;profiler::exec = false
profiler::qps = false
profiler::cancelled = false
;profiler::latency.client = false
;profiler::timeout.qps = false

[meta_server]
server_list = 0.0.0.0:34701

[duplication-group]
onebox = 1
onebox2 = 2

[pegasus.clusters]
onebox = 0.0.0.0:34701
onebox2 = 0.0.0.0:35701

[pegasus.collector]
enable_detect_hotkey = true
