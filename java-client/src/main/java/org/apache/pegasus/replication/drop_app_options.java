/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.pegasus.replication;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.11.0)",
    date = "2022-05-17")
public class drop_app_options
    implements org.apache.thrift.TBase<drop_app_options, drop_app_options._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<drop_app_options> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("drop_app_options");

  private static final org.apache.thrift.protocol.TField SUCCESS_IF_NOT_EXIST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "success_if_not_exist", org.apache.thrift.protocol.TType.BOOL, (short) 1);
  private static final org.apache.thrift.protocol.TField RESERVE_SECONDS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "reserve_seconds", org.apache.thrift.protocol.TType.I64, (short) 2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new drop_app_optionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new drop_app_optionsTupleSchemeFactory();

  public boolean success_if_not_exist; // required
  public long reserve_seconds; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUCCESS_IF_NOT_EXIST((short) 1, "success_if_not_exist"),
    RESERVE_SECONDS((short) 2, "reserve_seconds");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // SUCCESS_IF_NOT_EXIST
          return SUCCESS_IF_NOT_EXIST;
        case 2: // RESERVE_SECONDS
          return RESERVE_SECONDS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESS_IF_NOT_EXIST_ISSET_ID = 0;
  private static final int __RESERVE_SECONDS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESERVE_SECONDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.SUCCESS_IF_NOT_EXIST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "success_if_not_exist",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.RESERVE_SECONDS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "reserve_seconds",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        drop_app_options.class, metaDataMap);
  }

  public drop_app_options() {}

  public drop_app_options(boolean success_if_not_exist) {
    this();
    this.success_if_not_exist = success_if_not_exist;
    setSuccess_if_not_existIsSet(true);
  }

  /** Performs a deep copy on <i>other</i>. */
  public drop_app_options(drop_app_options other) {
    __isset_bitfield = other.__isset_bitfield;
    this.success_if_not_exist = other.success_if_not_exist;
    this.reserve_seconds = other.reserve_seconds;
  }

  public drop_app_options deepCopy() {
    return new drop_app_options(this);
  }

  @Override
  public void clear() {
    setSuccess_if_not_existIsSet(false);
    this.success_if_not_exist = false;
    setReserve_secondsIsSet(false);
    this.reserve_seconds = 0;
  }

  public boolean isSuccess_if_not_exist() {
    return this.success_if_not_exist;
  }

  public drop_app_options setSuccess_if_not_exist(boolean success_if_not_exist) {
    this.success_if_not_exist = success_if_not_exist;
    setSuccess_if_not_existIsSet(true);
    return this;
  }

  public void unsetSuccess_if_not_exist() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_IF_NOT_EXIST_ISSET_ID);
  }

  /**
   * Returns true if field success_if_not_exist is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetSuccess_if_not_exist() {
    return org.apache.thrift.EncodingUtils.testBit(
        __isset_bitfield, __SUCCESS_IF_NOT_EXIST_ISSET_ID);
  }

  public void setSuccess_if_not_existIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __SUCCESS_IF_NOT_EXIST_ISSET_ID, value);
  }

  public long getReserve_seconds() {
    return this.reserve_seconds;
  }

  public drop_app_options setReserve_seconds(long reserve_seconds) {
    this.reserve_seconds = reserve_seconds;
    setReserve_secondsIsSet(true);
    return this;
  }

  public void unsetReserve_seconds() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESERVE_SECONDS_ISSET_ID);
  }

  /**
   * Returns true if field reserve_seconds is set (has been assigned a value) and false otherwise
   */
  public boolean isSetReserve_seconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESERVE_SECONDS_ISSET_ID);
  }

  public void setReserve_secondsIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESERVE_SECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case SUCCESS_IF_NOT_EXIST:
        if (value == null) {
          unsetSuccess_if_not_exist();
        } else {
          setSuccess_if_not_exist((java.lang.Boolean) value);
        }
        break;

      case RESERVE_SECONDS:
        if (value == null) {
          unsetReserve_seconds();
        } else {
          setReserve_seconds((java.lang.Long) value);
        }
        break;
    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case SUCCESS_IF_NOT_EXIST:
        return isSuccess_if_not_exist();

      case RESERVE_SECONDS:
        return getReserve_seconds();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case SUCCESS_IF_NOT_EXIST:
        return isSetSuccess_if_not_exist();
      case RESERVE_SECONDS:
        return isSetReserve_seconds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null) return false;
    if (that instanceof drop_app_options) return this.equals((drop_app_options) that);
    return false;
  }

  public boolean equals(drop_app_options that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_success_if_not_exist = true;
    boolean that_present_success_if_not_exist = true;
    if (this_present_success_if_not_exist || that_present_success_if_not_exist) {
      if (!(this_present_success_if_not_exist && that_present_success_if_not_exist)) return false;
      if (this.success_if_not_exist != that.success_if_not_exist) return false;
    }

    boolean this_present_reserve_seconds = true && this.isSetReserve_seconds();
    boolean that_present_reserve_seconds = true && that.isSetReserve_seconds();
    if (this_present_reserve_seconds || that_present_reserve_seconds) {
      if (!(this_present_reserve_seconds && that_present_reserve_seconds)) return false;
      if (this.reserve_seconds != that.reserve_seconds) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((success_if_not_exist) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetReserve_seconds()) ? 131071 : 524287);
    if (isSetReserve_seconds())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reserve_seconds);

    return hashCode;
  }

  @Override
  public int compareTo(drop_app_options other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison =
        java.lang.Boolean.valueOf(isSetSuccess_if_not_exist())
            .compareTo(other.isSetSuccess_if_not_exist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess_if_not_exist()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(
              this.success_if_not_exist, other.success_if_not_exist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.valueOf(isSetReserve_seconds()).compareTo(other.isSetReserve_seconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve_seconds()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.reserve_seconds, other.reserve_seconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("drop_app_options(");
    boolean first = true;

    sb.append("success_if_not_exist:");
    sb.append(this.success_if_not_exist);
    first = false;
    if (isSetReserve_seconds()) {
      if (!first) sb.append(", ");
      sb.append("reserve_seconds:");
      sb.append(this.reserve_seconds);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class drop_app_optionsStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    public drop_app_optionsStandardScheme getScheme() {
      return new drop_app_optionsStandardScheme();
    }
  }

  private static class drop_app_optionsStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<drop_app_options> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, drop_app_options struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // SUCCESS_IF_NOT_EXIST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success_if_not_exist = iprot.readBool();
              struct.setSuccess_if_not_existIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESERVE_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reserve_seconds = iprot.readI64();
              struct.setReserve_secondsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, drop_app_options struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUCCESS_IF_NOT_EXIST_FIELD_DESC);
      oprot.writeBool(struct.success_if_not_exist);
      oprot.writeFieldEnd();
      if (struct.isSetReserve_seconds()) {
        oprot.writeFieldBegin(RESERVE_SECONDS_FIELD_DESC);
        oprot.writeI64(struct.reserve_seconds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class drop_app_optionsTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    public drop_app_optionsTupleScheme getScheme() {
      return new drop_app_optionsTupleScheme();
    }
  }

  private static class drop_app_optionsTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<drop_app_options> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, drop_app_options struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSuccess_if_not_exist()) {
        optionals.set(0);
      }
      if (struct.isSetReserve_seconds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSuccess_if_not_exist()) {
        oprot.writeBool(struct.success_if_not_exist);
      }
      if (struct.isSetReserve_seconds()) {
        oprot.writeI64(struct.reserve_seconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, drop_app_options struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.success_if_not_exist = iprot.readBool();
        struct.setSuccess_if_not_existIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reserve_seconds = iprot.readI64();
        struct.setReserve_secondsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
