/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.pegasus.replication;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.11.0)",
    date = "2022-03-10")
public class create_app_options
    implements org.apache.thrift.TBase<create_app_options, create_app_options._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<create_app_options> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("create_app_options");

  private static final org.apache.thrift.protocol.TField PARTITION_COUNT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "partition_count", org.apache.thrift.protocol.TType.I32, (short) 1);
  private static final org.apache.thrift.protocol.TField REPLICA_COUNT_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "replica_count", org.apache.thrift.protocol.TType.I32, (short) 2);
  private static final org.apache.thrift.protocol.TField SUCCESS_IF_EXIST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "success_if_exist", org.apache.thrift.protocol.TType.BOOL, (short) 3);
  private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "app_type", org.apache.thrift.protocol.TType.STRING, (short) 4);
  private static final org.apache.thrift.protocol.TField IS_STATEFUL_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "is_stateful", org.apache.thrift.protocol.TType.BOOL, (short) 5);
  private static final org.apache.thrift.protocol.TField ENVS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "envs", org.apache.thrift.protocol.TType.MAP, (short) 6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new create_app_optionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new create_app_optionsTupleSchemeFactory();

  public int partition_count; // required
  public int replica_count; // required
  public boolean success_if_exist; // required
  public java.lang.String app_type; // required
  public boolean is_stateful; // required
  public java.util.Map<java.lang.String, java.lang.String> envs; // required

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_COUNT((short) 1, "partition_count"),
    REPLICA_COUNT((short) 2, "replica_count"),
    SUCCESS_IF_EXIST((short) 3, "success_if_exist"),
    APP_TYPE((short) 4, "app_type"),
    IS_STATEFUL((short) 5, "is_stateful"),
    ENVS((short) 6, "envs");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // PARTITION_COUNT
          return PARTITION_COUNT;
        case 2: // REPLICA_COUNT
          return REPLICA_COUNT;
        case 3: // SUCCESS_IF_EXIST
          return SUCCESS_IF_EXIST;
        case 4: // APP_TYPE
          return APP_TYPE;
        case 5: // IS_STATEFUL
          return IS_STATEFUL;
        case 6: // ENVS
          return ENVS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITION_COUNT_ISSET_ID = 0;
  private static final int __REPLICA_COUNT_ISSET_ID = 1;
  private static final int __SUCCESS_IF_EXIST_ISSET_ID = 2;
  private static final int __IS_STATEFUL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.PARTITION_COUNT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "partition_count",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(
        _Fields.REPLICA_COUNT,
        new org.apache.thrift.meta_data.FieldMetaData(
            "replica_count",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(
        _Fields.SUCCESS_IF_EXIST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "success_if_exist",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.APP_TYPE,
        new org.apache.thrift.meta_data.FieldMetaData(
            "app_type",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(
        _Fields.IS_STATEFUL,
        new org.apache.thrift.meta_data.FieldMetaData(
            "is_stateful",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(
        _Fields.ENVS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "envs",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING),
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        create_app_options.class, metaDataMap);
  }

  public create_app_options() {}

  public create_app_options(
      int partition_count,
      int replica_count,
      boolean success_if_exist,
      java.lang.String app_type,
      boolean is_stateful,
      java.util.Map<java.lang.String, java.lang.String> envs) {
    this();
    this.partition_count = partition_count;
    setPartition_countIsSet(true);
    this.replica_count = replica_count;
    setReplica_countIsSet(true);
    this.success_if_exist = success_if_exist;
    setSuccess_if_existIsSet(true);
    this.app_type = app_type;
    this.is_stateful = is_stateful;
    setIs_statefulIsSet(true);
    this.envs = envs;
  }

  /** Performs a deep copy on <i>other</i>. */
  public create_app_options(create_app_options other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partition_count = other.partition_count;
    this.replica_count = other.replica_count;
    this.success_if_exist = other.success_if_exist;
    if (other.isSetApp_type()) {
      this.app_type = other.app_type;
    }
    this.is_stateful = other.is_stateful;
    if (other.isSetEnvs()) {
      java.util.Map<java.lang.String, java.lang.String> __this__envs =
          new java.util.HashMap<java.lang.String, java.lang.String>(other.envs);
      this.envs = __this__envs;
    }
  }

  public create_app_options deepCopy() {
    return new create_app_options(this);
  }

  @Override
  public void clear() {
    setPartition_countIsSet(false);
    this.partition_count = 0;
    setReplica_countIsSet(false);
    this.replica_count = 0;
    setSuccess_if_existIsSet(false);
    this.success_if_exist = false;
    this.app_type = null;
    setIs_statefulIsSet(false);
    this.is_stateful = false;
    this.envs = null;
  }

  public int getPartition_count() {
    return this.partition_count;
  }

  public create_app_options setPartition_count(int partition_count) {
    this.partition_count = partition_count;
    setPartition_countIsSet(true);
    return this;
  }

  public void unsetPartition_count() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_COUNT_ISSET_ID);
  }

  /**
   * Returns true if field partition_count is set (has been assigned a value) and false otherwise
   */
  public boolean isSetPartition_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_COUNT_ISSET_ID);
  }

  public void setPartition_countIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_COUNT_ISSET_ID, value);
  }

  public int getReplica_count() {
    return this.replica_count;
  }

  public create_app_options setReplica_count(int replica_count) {
    this.replica_count = replica_count;
    setReplica_countIsSet(true);
    return this;
  }

  public void unsetReplica_count() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLICA_COUNT_ISSET_ID);
  }

  /** Returns true if field replica_count is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLICA_COUNT_ISSET_ID);
  }

  public void setReplica_countIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLICA_COUNT_ISSET_ID, value);
  }

  public boolean isSuccess_if_exist() {
    return this.success_if_exist;
  }

  public create_app_options setSuccess_if_exist(boolean success_if_exist) {
    this.success_if_exist = success_if_exist;
    setSuccess_if_existIsSet(true);
    return this;
  }

  public void unsetSuccess_if_exist() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_IF_EXIST_ISSET_ID);
  }

  /**
   * Returns true if field success_if_exist is set (has been assigned a value) and false otherwise
   */
  public boolean isSetSuccess_if_exist() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_IF_EXIST_ISSET_ID);
  }

  public void setSuccess_if_existIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __SUCCESS_IF_EXIST_ISSET_ID, value);
  }

  public java.lang.String getApp_type() {
    return this.app_type;
  }

  public create_app_options setApp_type(java.lang.String app_type) {
    this.app_type = app_type;
    return this;
  }

  public void unsetApp_type() {
    this.app_type = null;
  }

  /** Returns true if field app_type is set (has been assigned a value) and false otherwise */
  public boolean isSetApp_type() {
    return this.app_type != null;
  }

  public void setApp_typeIsSet(boolean value) {
    if (!value) {
      this.app_type = null;
    }
  }

  public boolean isIs_stateful() {
    return this.is_stateful;
  }

  public create_app_options setIs_stateful(boolean is_stateful) {
    this.is_stateful = is_stateful;
    setIs_statefulIsSet(true);
    return this;
  }

  public void unsetIs_stateful() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_STATEFUL_ISSET_ID);
  }

  /** Returns true if field is_stateful is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_stateful() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_STATEFUL_ISSET_ID);
  }

  public void setIs_statefulIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_STATEFUL_ISSET_ID, value);
  }

  public int getEnvsSize() {
    return (this.envs == null) ? 0 : this.envs.size();
  }

  public void putToEnvs(java.lang.String key, java.lang.String val) {
    if (this.envs == null) {
      this.envs = new java.util.HashMap<java.lang.String, java.lang.String>();
    }
    this.envs.put(key, val);
  }

  public java.util.Map<java.lang.String, java.lang.String> getEnvs() {
    return this.envs;
  }

  public create_app_options setEnvs(java.util.Map<java.lang.String, java.lang.String> envs) {
    this.envs = envs;
    return this;
  }

  public void unsetEnvs() {
    this.envs = null;
  }

  /** Returns true if field envs is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvs() {
    return this.envs != null;
  }

  public void setEnvsIsSet(boolean value) {
    if (!value) {
      this.envs = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case PARTITION_COUNT:
        if (value == null) {
          unsetPartition_count();
        } else {
          setPartition_count((java.lang.Integer) value);
        }
        break;

      case REPLICA_COUNT:
        if (value == null) {
          unsetReplica_count();
        } else {
          setReplica_count((java.lang.Integer) value);
        }
        break;

      case SUCCESS_IF_EXIST:
        if (value == null) {
          unsetSuccess_if_exist();
        } else {
          setSuccess_if_exist((java.lang.Boolean) value);
        }
        break;

      case APP_TYPE:
        if (value == null) {
          unsetApp_type();
        } else {
          setApp_type((java.lang.String) value);
        }
        break;

      case IS_STATEFUL:
        if (value == null) {
          unsetIs_stateful();
        } else {
          setIs_stateful((java.lang.Boolean) value);
        }
        break;

      case ENVS:
        if (value == null) {
          unsetEnvs();
        } else {
          setEnvs((java.util.Map<java.lang.String, java.lang.String>) value);
        }
        break;
    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case PARTITION_COUNT:
        return getPartition_count();

      case REPLICA_COUNT:
        return getReplica_count();

      case SUCCESS_IF_EXIST:
        return isSuccess_if_exist();

      case APP_TYPE:
        return getApp_type();

      case IS_STATEFUL:
        return isIs_stateful();

      case ENVS:
        return getEnvs();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case PARTITION_COUNT:
        return isSetPartition_count();
      case REPLICA_COUNT:
        return isSetReplica_count();
      case SUCCESS_IF_EXIST:
        return isSetSuccess_if_exist();
      case APP_TYPE:
        return isSetApp_type();
      case IS_STATEFUL:
        return isSetIs_stateful();
      case ENVS:
        return isSetEnvs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null) return false;
    if (that instanceof create_app_options) return this.equals((create_app_options) that);
    return false;
  }

  public boolean equals(create_app_options that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_partition_count = true;
    boolean that_present_partition_count = true;
    if (this_present_partition_count || that_present_partition_count) {
      if (!(this_present_partition_count && that_present_partition_count)) return false;
      if (this.partition_count != that.partition_count) return false;
    }

    boolean this_present_replica_count = true;
    boolean that_present_replica_count = true;
    if (this_present_replica_count || that_present_replica_count) {
      if (!(this_present_replica_count && that_present_replica_count)) return false;
      if (this.replica_count != that.replica_count) return false;
    }

    boolean this_present_success_if_exist = true;
    boolean that_present_success_if_exist = true;
    if (this_present_success_if_exist || that_present_success_if_exist) {
      if (!(this_present_success_if_exist && that_present_success_if_exist)) return false;
      if (this.success_if_exist != that.success_if_exist) return false;
    }

    boolean this_present_app_type = true && this.isSetApp_type();
    boolean that_present_app_type = true && that.isSetApp_type();
    if (this_present_app_type || that_present_app_type) {
      if (!(this_present_app_type && that_present_app_type)) return false;
      if (!this.app_type.equals(that.app_type)) return false;
    }

    boolean this_present_is_stateful = true;
    boolean that_present_is_stateful = true;
    if (this_present_is_stateful || that_present_is_stateful) {
      if (!(this_present_is_stateful && that_present_is_stateful)) return false;
      if (this.is_stateful != that.is_stateful) return false;
    }

    boolean this_present_envs = true && this.isSetEnvs();
    boolean that_present_envs = true && that.isSetEnvs();
    if (this_present_envs || that_present_envs) {
      if (!(this_present_envs && that_present_envs)) return false;
      if (!this.envs.equals(that.envs)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + partition_count;

    hashCode = hashCode * 8191 + replica_count;

    hashCode = hashCode * 8191 + ((success_if_exist) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetApp_type()) ? 131071 : 524287);
    if (isSetApp_type()) hashCode = hashCode * 8191 + app_type.hashCode();

    hashCode = hashCode * 8191 + ((is_stateful) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnvs()) ? 131071 : 524287);
    if (isSetEnvs()) hashCode = hashCode * 8191 + envs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(create_app_options other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison =
        java.lang.Boolean.valueOf(isSetPartition_count()).compareTo(other.isSetPartition_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_count()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.partition_count, other.partition_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.valueOf(isSetReplica_count()).compareTo(other.isSetReplica_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica_count()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.replica_count, other.replica_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.valueOf(isSetSuccess_if_exist()).compareTo(other.isSetSuccess_if_exist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess_if_exist()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.success_if_exist, other.success_if_exist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApp_type()).compareTo(other.isSetApp_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_type, other.app_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.valueOf(isSetIs_stateful()).compareTo(other.isSetIs_stateful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_stateful()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_stateful, other.is_stateful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnvs()).compareTo(other.isSetEnvs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envs, other.envs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("create_app_options(");
    boolean first = true;

    sb.append("partition_count:");
    sb.append(this.partition_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replica_count:");
    sb.append(this.replica_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("success_if_exist:");
    sb.append(this.success_if_exist);
    first = false;
    if (!first) sb.append(", ");
    sb.append("app_type:");
    if (this.app_type == null) {
      sb.append("null");
    } else {
      sb.append(this.app_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_stateful:");
    sb.append(this.is_stateful);
    first = false;
    if (!first) sb.append(", ");
    sb.append("envs:");
    if (this.envs == null) {
      sb.append("null");
    } else {
      sb.append(this.envs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class create_app_optionsStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    public create_app_optionsStandardScheme getScheme() {
      return new create_app_optionsStandardScheme();
    }
  }

  private static class create_app_optionsStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<create_app_options> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, create_app_options struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition_count = iprot.readI32();
              struct.setPartition_countIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLICA_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replica_count = iprot.readI32();
              struct.setReplica_countIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUCCESS_IF_EXIST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success_if_exist = iprot.readBool();
              struct.setSuccess_if_existIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app_type = iprot.readString();
              struct.setApp_typeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_STATEFUL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_stateful = iprot.readBool();
              struct.setIs_statefulIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENVS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.envs =
                    new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.envs.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setEnvsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, create_app_options struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARTITION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.partition_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLICA_COUNT_FIELD_DESC);
      oprot.writeI32(struct.replica_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_IF_EXIST_FIELD_DESC);
      oprot.writeBool(struct.success_if_exist);
      oprot.writeFieldEnd();
      if (struct.app_type != null) {
        oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
        oprot.writeString(struct.app_type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_STATEFUL_FIELD_DESC);
      oprot.writeBool(struct.is_stateful);
      oprot.writeFieldEnd();
      if (struct.envs != null) {
        oprot.writeFieldBegin(ENVS_FIELD_DESC);
        {
          oprot.writeMapBegin(
              new org.apache.thrift.protocol.TMap(
                  org.apache.thrift.protocol.TType.STRING,
                  org.apache.thrift.protocol.TType.STRING,
                  struct.envs.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 :
              struct.envs.entrySet()) {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class create_app_optionsTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    public create_app_optionsTupleScheme getScheme() {
      return new create_app_optionsTupleScheme();
    }
  }

  private static class create_app_optionsTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<create_app_options> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, create_app_options struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPartition_count()) {
        optionals.set(0);
      }
      if (struct.isSetReplica_count()) {
        optionals.set(1);
      }
      if (struct.isSetSuccess_if_exist()) {
        optionals.set(2);
      }
      if (struct.isSetApp_type()) {
        optionals.set(3);
      }
      if (struct.isSetIs_stateful()) {
        optionals.set(4);
      }
      if (struct.isSetEnvs()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPartition_count()) {
        oprot.writeI32(struct.partition_count);
      }
      if (struct.isSetReplica_count()) {
        oprot.writeI32(struct.replica_count);
      }
      if (struct.isSetSuccess_if_exist()) {
        oprot.writeBool(struct.success_if_exist);
      }
      if (struct.isSetApp_type()) {
        oprot.writeString(struct.app_type);
      }
      if (struct.isSetIs_stateful()) {
        oprot.writeBool(struct.is_stateful);
      }
      if (struct.isSetEnvs()) {
        {
          oprot.writeI32(struct.envs.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 :
              struct.envs.entrySet()) {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, create_app_options struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.partition_count = iprot.readI32();
        struct.setPartition_countIsSet(true);
      }
      if (incoming.get(1)) {
        struct.replica_count = iprot.readI32();
        struct.setReplica_countIsSet(true);
      }
      if (incoming.get(2)) {
        struct.success_if_exist = iprot.readBool();
        struct.setSuccess_if_existIsSet(true);
      }
      if (incoming.get(3)) {
        struct.app_type = iprot.readString();
        struct.setApp_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_stateful = iprot.readBool();
        struct.setIs_statefulIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map6 =
              new org.apache.thrift.protocol.TMap(
                  org.apache.thrift.protocol.TType.STRING,
                  org.apache.thrift.protocol.TType.STRING,
                  iprot.readI32());
          struct.envs = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map6.size);
          java.lang.String _key7;
          java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.envs.put(_key7, _val8);
          }
        }
        struct.setEnvsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
