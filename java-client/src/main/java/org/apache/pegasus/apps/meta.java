/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.pegasus.apps;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.11.0)",
    date = "2022-05-17")
public class meta {

  public interface Iface {

    public org.apache.pegasus.replication.query_cfg_response query_cfg(
        org.apache.pegasus.replication.query_cfg_request query) throws org.apache.thrift.TException;

    public org.apache.pegasus.replication.configuration_create_app_response create_app(
        org.apache.pegasus.replication.configuration_create_app_request request)
        throws org.apache.thrift.TException;

    public org.apache.pegasus.replication.configuration_drop_app_response drop_app(
        org.apache.pegasus.replication.configuration_drop_app_request request)
        throws org.apache.thrift.TException;
  }

  public interface AsyncIface {

    public void query_cfg(
        org.apache.pegasus.replication.query_cfg_request query,
        org.apache.thrift.async.AsyncMethodCallback<
                org.apache.pegasus.replication.query_cfg_response>
            resultHandler)
        throws org.apache.thrift.TException;

    public void create_app(
        org.apache.pegasus.replication.configuration_create_app_request request,
        org.apache.thrift.async.AsyncMethodCallback<
                org.apache.pegasus.replication.configuration_create_app_response>
            resultHandler)
        throws org.apache.thrift.TException;

    public void drop_app(
        org.apache.pegasus.replication.configuration_drop_app_request request,
        org.apache.thrift.async.AsyncMethodCallback<
                org.apache.pegasus.replication.configuration_drop_app_response>
            resultHandler)
        throws org.apache.thrift.TException;
  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}

      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      public Client getClient(
          org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(
        org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public org.apache.pegasus.replication.query_cfg_response query_cfg(
        org.apache.pegasus.replication.query_cfg_request query)
        throws org.apache.thrift.TException {
      send_query_cfg(query);
      return recv_query_cfg();
    }

    public void send_query_cfg(org.apache.pegasus.replication.query_cfg_request query)
        throws org.apache.thrift.TException {
      query_cfg_args args = new query_cfg_args();
      args.setQuery(query);
      sendBase("query_cfg", args);
    }

    public org.apache.pegasus.replication.query_cfg_response recv_query_cfg()
        throws org.apache.thrift.TException {
      query_cfg_result result = new query_cfg_result();
      receiveBase(result, "query_cfg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "query_cfg failed: unknown result");
    }

    public org.apache.pegasus.replication.configuration_create_app_response create_app(
        org.apache.pegasus.replication.configuration_create_app_request request)
        throws org.apache.thrift.TException {
      send_create_app(request);
      return recv_create_app();
    }

    public void send_create_app(
        org.apache.pegasus.replication.configuration_create_app_request request)
        throws org.apache.thrift.TException {
      create_app_args args = new create_app_args();
      args.setRequest(request);
      sendBase("create_app", args);
    }

    public org.apache.pegasus.replication.configuration_create_app_response recv_create_app()
        throws org.apache.thrift.TException {
      create_app_result result = new create_app_result();
      receiveBase(result, "create_app");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "create_app failed: unknown result");
    }

    public org.apache.pegasus.replication.configuration_drop_app_response drop_app(
        org.apache.pegasus.replication.configuration_drop_app_request request)
        throws org.apache.thrift.TException {
      send_drop_app(request);
      return recv_drop_app();
    }

    public void send_drop_app(org.apache.pegasus.replication.configuration_drop_app_request request)
        throws org.apache.thrift.TException {
      drop_app_args args = new drop_app_args();
      args.setRequest(request);
      sendBase("drop_app", args);
    }

    public org.apache.pegasus.replication.configuration_drop_app_response recv_drop_app()
        throws org.apache.thrift.TException {
      drop_app_result result = new drop_app_result();
      receiveBase(result, "drop_app");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "drop_app failed: unknown result");
    }
  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
      implements AsyncIface {
    public static class Factory
        implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(
          org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      public AsyncClient getAsyncClient(
          org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(
        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void query_cfg(
        org.apache.pegasus.replication.query_cfg_request query,
        org.apache.thrift.async.AsyncMethodCallback<
                org.apache.pegasus.replication.query_cfg_response>
            resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      query_cfg_call method_call =
          new query_cfg_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_cfg_call
        extends org.apache.thrift.async.TAsyncMethodCall<
            org.apache.pegasus.replication.query_cfg_response> {
      private org.apache.pegasus.replication.query_cfg_request query;

      public query_cfg_call(
          org.apache.pegasus.replication.query_cfg_request query,
          org.apache.thrift.async.AsyncMethodCallback<
                  org.apache.pegasus.replication.query_cfg_response>
              resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "query_cfg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_cfg_args args = new query_cfg_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.pegasus.replication.query_cfg_response getResult()
          throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_cfg();
      }
    }

    public void create_app(
        org.apache.pegasus.replication.configuration_create_app_request request,
        org.apache.thrift.async.AsyncMethodCallback<
                org.apache.pegasus.replication.configuration_create_app_response>
            resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      create_app_call method_call =
          new create_app_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_app_call
        extends org.apache.thrift.async.TAsyncMethodCall<
            org.apache.pegasus.replication.configuration_create_app_response> {
      private org.apache.pegasus.replication.configuration_create_app_request request;

      public create_app_call(
          org.apache.pegasus.replication.configuration_create_app_request request,
          org.apache.thrift.async.AsyncMethodCallback<
                  org.apache.pegasus.replication.configuration_create_app_response>
              resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "create_app", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_app_args args = new create_app_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.pegasus.replication.configuration_create_app_response getResult()
          throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_app();
      }
    }

    public void drop_app(
        org.apache.pegasus.replication.configuration_drop_app_request request,
        org.apache.thrift.async.AsyncMethodCallback<
                org.apache.pegasus.replication.configuration_drop_app_response>
            resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      drop_app_call method_call =
          new drop_app_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class drop_app_call
        extends org.apache.thrift.async.TAsyncMethodCall<
            org.apache.pegasus.replication.configuration_drop_app_response> {
      private org.apache.pegasus.replication.configuration_drop_app_request request;

      public drop_app_call(
          org.apache.pegasus.replication.configuration_drop_app_request request,
          org.apache.thrift.async.AsyncMethodCallback<
                  org.apache.pegasus.replication.configuration_drop_app_response>
              resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "drop_app", org.apache.thrift.protocol.TMessageType.CALL, 0));
        drop_app_args args = new drop_app_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.pegasus.replication.configuration_drop_app_response getResult()
          throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_drop_app();
      }
    }
  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
      implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER =
        org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(
          iface,
          getProcessMap(
              new java.util.HashMap<
                  java.lang.String,
                  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(
        I iface,
        java.util.Map<
                java.lang.String,
                org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface>
        java.util.Map<
                java.lang.String,
                org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            getProcessMap(
                java.util.Map<
                        java.lang.String,
                        org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
                    processMap) {
      processMap.put("query_cfg", new query_cfg());
      processMap.put("create_app", new create_app());
      processMap.put("drop_app", new drop_app());
      return processMap;
    }

    public static class query_cfg<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, query_cfg_args> {
      public query_cfg() {
        super("query_cfg");
      }

      public query_cfg_args getEmptyArgsInstance() {
        return new query_cfg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public query_cfg_result getResult(I iface, query_cfg_args args)
          throws org.apache.thrift.TException {
        query_cfg_result result = new query_cfg_result();
        result.success = iface.query_cfg(args.query);
        return result;
      }
    }

    public static class create_app<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, create_app_args> {
      public create_app() {
        super("create_app");
      }

      public create_app_args getEmptyArgsInstance() {
        return new create_app_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public create_app_result getResult(I iface, create_app_args args)
          throws org.apache.thrift.TException {
        create_app_result result = new create_app_result();
        result.success = iface.create_app(args.request);
        return result;
      }
    }

    public static class drop_app<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, drop_app_args> {
      public drop_app() {
        super("drop_app");
      }

      public drop_app_args getEmptyArgsInstance() {
        return new drop_app_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public drop_app_result getResult(I iface, drop_app_args args)
          throws org.apache.thrift.TException {
        drop_app_result result = new drop_app_result();
        result.success = iface.drop_app(args.request);
        return result;
      }
    }
  }

  public static class AsyncProcessor<I extends AsyncIface>
      extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER =
        org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(
          iface,
          getProcessMap(
              new java.util.HashMap<
                  java.lang.String,
                  org.apache.thrift.AsyncProcessFunction<
                      I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(
        I iface,
        java.util.Map<
                java.lang.String,
                org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface>
        java.util.Map<
                java.lang.String,
                org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            getProcessMap(
                java.util.Map<
                        java.lang.String,
                        org.apache.thrift.AsyncProcessFunction<
                            I, ? extends org.apache.thrift.TBase, ?>>
                    processMap) {
      processMap.put("query_cfg", new query_cfg());
      processMap.put("create_app", new create_app());
      processMap.put("drop_app", new drop_app());
      return processMap;
    }

    public static class query_cfg<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<
            I, query_cfg_args, org.apache.pegasus.replication.query_cfg_response> {
      public query_cfg() {
        super("query_cfg");
      }

      public query_cfg_args getEmptyArgsInstance() {
        return new query_cfg_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<
              org.apache.pegasus.replication.query_cfg_response>
          getResultHandler(
              final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
              final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<
            org.apache.pegasus.replication.query_cfg_response>() {
          public void onComplete(org.apache.pegasus.replication.query_cfg_response o) {
            query_cfg_result result = new query_cfg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            query_cfg_result result = new query_cfg_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          query_cfg_args args,
          org.apache.thrift.async.AsyncMethodCallback<
                  org.apache.pegasus.replication.query_cfg_response>
              resultHandler)
          throws org.apache.thrift.TException {
        iface.query_cfg(args.query, resultHandler);
      }
    }

    public static class create_app<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<
            I, create_app_args, org.apache.pegasus.replication.configuration_create_app_response> {
      public create_app() {
        super("create_app");
      }

      public create_app_args getEmptyArgsInstance() {
        return new create_app_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<
              org.apache.pegasus.replication.configuration_create_app_response>
          getResultHandler(
              final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
              final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<
            org.apache.pegasus.replication.configuration_create_app_response>() {
          public void onComplete(
              org.apache.pegasus.replication.configuration_create_app_response o) {
            create_app_result result = new create_app_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            create_app_result result = new create_app_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          create_app_args args,
          org.apache.thrift.async.AsyncMethodCallback<
                  org.apache.pegasus.replication.configuration_create_app_response>
              resultHandler)
          throws org.apache.thrift.TException {
        iface.create_app(args.request, resultHandler);
      }
    }

    public static class drop_app<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<
            I, drop_app_args, org.apache.pegasus.replication.configuration_drop_app_response> {
      public drop_app() {
        super("drop_app");
      }

      public drop_app_args getEmptyArgsInstance() {
        return new drop_app_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<
              org.apache.pegasus.replication.configuration_drop_app_response>
          getResultHandler(
              final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
              final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<
            org.apache.pegasus.replication.configuration_drop_app_response>() {
          public void onComplete(org.apache.pegasus.replication.configuration_drop_app_response o) {
            drop_app_result result = new drop_app_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            drop_app_result result = new drop_app_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          drop_app_args args,
          org.apache.thrift.async.AsyncMethodCallback<
                  org.apache.pegasus.replication.configuration_drop_app_response>
              resultHandler)
          throws org.apache.thrift.TException {
        iface.drop_app(args.request, resultHandler);
      }
    }
  }

  public static class query_cfg_args
      implements org.apache.thrift.TBase<query_cfg_args, query_cfg_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<query_cfg_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("query_cfg_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new query_cfg_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new query_cfg_argsTupleSchemeFactory();

    public org.apache.pegasus.replication.query_cfg_request query; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short) 1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName =
          new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.QUERY,
          new org.apache.thrift.meta_data.FieldMetaData(
              "query",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.pegasus.replication.query_cfg_request.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          query_cfg_args.class, metaDataMap);
    }

    public query_cfg_args() {}

    public query_cfg_args(org.apache.pegasus.replication.query_cfg_request query) {
      this();
      this.query = query;
    }

    /** Performs a deep copy on <i>other</i>. */
    public query_cfg_args(query_cfg_args other) {
      if (other.isSetQuery()) {
        this.query = new org.apache.pegasus.replication.query_cfg_request(other.query);
      }
    }

    public query_cfg_args deepCopy() {
      return new query_cfg_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public org.apache.pegasus.replication.query_cfg_request getQuery() {
      return this.query;
    }

    public query_cfg_args setQuery(org.apache.pegasus.replication.query_cfg_request query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case QUERY:
          if (value == null) {
            unsetQuery();
          } else {
            setQuery((org.apache.pegasus.replication.query_cfg_request) value);
          }
          break;
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case QUERY:
          return getQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case QUERY:
          return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null) return false;
      if (that instanceof query_cfg_args) return this.equals((query_cfg_args) that);
      return false;
    }

    public boolean equals(query_cfg_args that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query)) return false;
        if (!this.query.equals(that.query)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery()) hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(query_cfg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("query_cfg_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_cfg_argsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public query_cfg_argsStandardScheme getScheme() {
        return new query_cfg_argsStandardScheme();
      }
    }

    private static class query_cfg_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<query_cfg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_cfg_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new org.apache.pegasus.replication.query_cfg_request();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_cfg_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class query_cfg_argsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public query_cfg_argsTupleScheme getScheme() {
        return new query_cfg_argsTupleScheme();
      }
    }

    private static class query_cfg_argsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<query_cfg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_cfg_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_cfg_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new org.apache.pegasus.replication.query_cfg_request();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class query_cfg_result
      implements org.apache.thrift.TBase<query_cfg_result, query_cfg_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<query_cfg_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("query_cfg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new query_cfg_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new query_cfg_resultTupleSchemeFactory();

    public org.apache.pegasus.replication.query_cfg_response success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName =
          new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.pegasus.replication.query_cfg_response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          query_cfg_result.class, metaDataMap);
    }

    public query_cfg_result() {}

    public query_cfg_result(org.apache.pegasus.replication.query_cfg_response success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public query_cfg_result(query_cfg_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.pegasus.replication.query_cfg_response(other.success);
      }
    }

    public query_cfg_result deepCopy() {
      return new query_cfg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public org.apache.pegasus.replication.query_cfg_response getSuccess() {
      return this.success;
    }

    public query_cfg_result setSuccess(org.apache.pegasus.replication.query_cfg_response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((org.apache.pegasus.replication.query_cfg_response) value);
          }
          break;
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null) return false;
      if (that instanceof query_cfg_result) return this.equals((query_cfg_result) that);
      return false;
    }

    public boolean equals(query_cfg_result that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) return false;
        if (!this.success.equals(that.success)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(query_cfg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("query_cfg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_cfg_resultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public query_cfg_resultStandardScheme getScheme() {
        return new query_cfg_resultStandardScheme();
      }
    }

    private static class query_cfg_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<query_cfg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_cfg_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.pegasus.replication.query_cfg_response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_cfg_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class query_cfg_resultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public query_cfg_resultTupleScheme getScheme() {
        return new query_cfg_resultTupleScheme();
      }
    }

    private static class query_cfg_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<query_cfg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_cfg_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_cfg_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.apache.pegasus.replication.query_cfg_response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class create_app_args
      implements org.apache.thrift.TBase<create_app_args, create_app_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<create_app_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("create_app_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "request", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new create_app_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new create_app_argsTupleSchemeFactory();

    public org.apache.pegasus.replication.configuration_create_app_request request; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short) 1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName =
          new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.REQUEST,
          new org.apache.thrift.meta_data.FieldMetaData(
              "request",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.pegasus.replication.configuration_create_app_request.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          create_app_args.class, metaDataMap);
    }

    public create_app_args() {}

    public create_app_args(
        org.apache.pegasus.replication.configuration_create_app_request request) {
      this();
      this.request = request;
    }

    /** Performs a deep copy on <i>other</i>. */
    public create_app_args(create_app_args other) {
      if (other.isSetRequest()) {
        this.request =
            new org.apache.pegasus.replication.configuration_create_app_request(other.request);
      }
    }

    public create_app_args deepCopy() {
      return new create_app_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public org.apache.pegasus.replication.configuration_create_app_request getRequest() {
      return this.request;
    }

    public create_app_args setRequest(
        org.apache.pegasus.replication.configuration_create_app_request request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case REQUEST:
          if (value == null) {
            unsetRequest();
          } else {
            setRequest((org.apache.pegasus.replication.configuration_create_app_request) value);
          }
          break;
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case REQUEST:
          return getRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case REQUEST:
          return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null) return false;
      if (that instanceof create_app_args) return this.equals((create_app_args) that);
      return false;
    }

    public boolean equals(create_app_args that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request)) return false;
        if (!this.request.equals(that.request)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest()) hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_app_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_app_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_app_argsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public create_app_argsStandardScheme getScheme() {
        return new create_app_argsStandardScheme();
      }
    }

    private static class create_app_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<create_app_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_app_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request =
                    new org.apache.pegasus.replication.configuration_create_app_request();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_app_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class create_app_argsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public create_app_argsTupleScheme getScheme() {
        return new create_app_argsTupleScheme();
      }
    }

    private static class create_app_argsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<create_app_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_app_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_app_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new org.apache.pegasus.replication.configuration_create_app_request();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class create_app_result
      implements org.apache.thrift.TBase<create_app_result, create_app_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<create_app_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("create_app_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new create_app_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new create_app_resultTupleSchemeFactory();

    public org.apache.pegasus.replication.configuration_create_app_response success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName =
          new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.pegasus.replication.configuration_create_app_response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          create_app_result.class, metaDataMap);
    }

    public create_app_result() {}

    public create_app_result(
        org.apache.pegasus.replication.configuration_create_app_response success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public create_app_result(create_app_result other) {
      if (other.isSetSuccess()) {
        this.success =
            new org.apache.pegasus.replication.configuration_create_app_response(other.success);
      }
    }

    public create_app_result deepCopy() {
      return new create_app_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public org.apache.pegasus.replication.configuration_create_app_response getSuccess() {
      return this.success;
    }

    public create_app_result setSuccess(
        org.apache.pegasus.replication.configuration_create_app_response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((org.apache.pegasus.replication.configuration_create_app_response) value);
          }
          break;
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null) return false;
      if (that instanceof create_app_result) return this.equals((create_app_result) that);
      return false;
    }

    public boolean equals(create_app_result that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) return false;
        if (!this.success.equals(that.success)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_app_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_app_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_app_resultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public create_app_resultStandardScheme getScheme() {
        return new create_app_resultStandardScheme();
      }
    }

    private static class create_app_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<create_app_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_app_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success =
                    new org.apache.pegasus.replication.configuration_create_app_response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_app_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class create_app_resultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public create_app_resultTupleScheme getScheme() {
        return new create_app_resultTupleScheme();
      }
    }

    private static class create_app_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<create_app_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_app_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_app_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.apache.pegasus.replication.configuration_create_app_response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class drop_app_args
      implements org.apache.thrift.TBase<drop_app_args, drop_app_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<drop_app_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("drop_app_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "request", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new drop_app_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new drop_app_argsTupleSchemeFactory();

    public org.apache.pegasus.replication.configuration_drop_app_request request; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short) 1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName =
          new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.REQUEST,
          new org.apache.thrift.meta_data.FieldMetaData(
              "request",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.pegasus.replication.configuration_drop_app_request.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          drop_app_args.class, metaDataMap);
    }

    public drop_app_args() {}

    public drop_app_args(org.apache.pegasus.replication.configuration_drop_app_request request) {
      this();
      this.request = request;
    }

    /** Performs a deep copy on <i>other</i>. */
    public drop_app_args(drop_app_args other) {
      if (other.isSetRequest()) {
        this.request =
            new org.apache.pegasus.replication.configuration_drop_app_request(other.request);
      }
    }

    public drop_app_args deepCopy() {
      return new drop_app_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public org.apache.pegasus.replication.configuration_drop_app_request getRequest() {
      return this.request;
    }

    public drop_app_args setRequest(
        org.apache.pegasus.replication.configuration_drop_app_request request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case REQUEST:
          if (value == null) {
            unsetRequest();
          } else {
            setRequest((org.apache.pegasus.replication.configuration_drop_app_request) value);
          }
          break;
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case REQUEST:
          return getRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case REQUEST:
          return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null) return false;
      if (that instanceof drop_app_args) return this.equals((drop_app_args) that);
      return false;
    }

    public boolean equals(drop_app_args that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request)) return false;
        if (!this.request.equals(that.request)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest()) hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(drop_app_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("drop_app_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drop_app_argsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public drop_app_argsStandardScheme getScheme() {
        return new drop_app_argsStandardScheme();
      }
    }

    private static class drop_app_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<drop_app_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drop_app_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request =
                    new org.apache.pegasus.replication.configuration_drop_app_request();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drop_app_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class drop_app_argsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public drop_app_argsTupleScheme getScheme() {
        return new drop_app_argsTupleScheme();
      }
    }

    private static class drop_app_argsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<drop_app_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drop_app_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drop_app_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new org.apache.pegasus.replication.configuration_drop_app_request();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class drop_app_result
      implements org.apache.thrift.TBase<drop_app_result, drop_app_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<drop_app_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("drop_app_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new drop_app_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new drop_app_resultTupleSchemeFactory();

    public org.apache.pegasus.replication.configuration_drop_app_response success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName =
          new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.pegasus.replication.configuration_drop_app_response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          drop_app_result.class, metaDataMap);
    }

    public drop_app_result() {}

    public drop_app_result(org.apache.pegasus.replication.configuration_drop_app_response success) {
      this();
      this.success = success;
    }

    /** Performs a deep copy on <i>other</i>. */
    public drop_app_result(drop_app_result other) {
      if (other.isSetSuccess()) {
        this.success =
            new org.apache.pegasus.replication.configuration_drop_app_response(other.success);
      }
    }

    public drop_app_result deepCopy() {
      return new drop_app_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public org.apache.pegasus.replication.configuration_drop_app_response getSuccess() {
      return this.success;
    }

    public drop_app_result setSuccess(
        org.apache.pegasus.replication.configuration_drop_app_response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((org.apache.pegasus.replication.configuration_drop_app_response) value);
          }
          break;
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null) return false;
      if (that instanceof drop_app_result) return this.equals((drop_app_result) that);
      return false;
    }

    public boolean equals(drop_app_result that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) return false;
        if (!this.success.equals(that.success)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess()) hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(drop_app_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("drop_app_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drop_app_resultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public drop_app_resultStandardScheme getScheme() {
        return new drop_app_resultStandardScheme();
      }
    }

    private static class drop_app_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<drop_app_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drop_app_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success =
                    new org.apache.pegasus.replication.configuration_drop_app_response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drop_app_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class drop_app_resultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public drop_app_resultTupleScheme getScheme() {
        return new drop_app_resultTupleScheme();
      }
    }

    private static class drop_app_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<drop_app_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drop_app_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drop_app_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.apache.pegasus.replication.configuration_drop_app_response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }
}
