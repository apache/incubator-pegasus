/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.pegasus.apps;

import org.apache.pegasus.base.blob;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.11.0)",
    date = "2020-04-13")
public class multi_put_request
    implements org.apache.thrift.TBase<multi_put_request, multi_put_request._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<multi_put_request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("multi_put_request");

  private static final org.apache.thrift.protocol.TField HASH_KEY_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "hash_key", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
  private static final org.apache.thrift.protocol.TField KVS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "kvs", org.apache.thrift.protocol.TType.LIST, (short) 2);
  private static final org.apache.thrift.protocol.TField EXPIRE_TS_SECONDS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "expire_ts_seconds", org.apache.thrift.protocol.TType.I32, (short) 3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
      new multi_put_requestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
      new multi_put_requestTupleSchemeFactory();

  public blob hash_key; // required
  public java.util.List<key_value> kvs; // required
  public int expire_ts_seconds; // required

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HASH_KEY((short) 1, "hash_key"),
    KVS((short) 2, "kvs"),
    EXPIRE_TS_SECONDS((short) 3, "expire_ts_seconds");

    private static final java.util.Map<java.lang.String, _Fields> byName =
        new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // HASH_KEY
          return HASH_KEY;
        case 2: // KVS
          return KVS;
        case 3: // EXPIRE_TS_SECONDS
          return EXPIRE_TS_SECONDS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRE_TS_SECONDS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.HASH_KEY,
        new org.apache.thrift.meta_data.FieldMetaData(
            "hash_key",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, blob.class)));
    tmpMap.put(
        _Fields.KVS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "kvs",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, key_value.class))));
    tmpMap.put(
        _Fields.EXPIRE_TS_SECONDS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "expire_ts_seconds",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
        multi_put_request.class, metaDataMap);
  }

  public multi_put_request() {}

  public multi_put_request(blob hash_key, java.util.List<key_value> kvs, int expire_ts_seconds) {
    this();
    this.hash_key = hash_key;
    this.kvs = kvs;
    this.expire_ts_seconds = expire_ts_seconds;
    setExpire_ts_secondsIsSet(true);
  }

  /** Performs a deep copy on <i>other</i>. */
  public multi_put_request(multi_put_request other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHash_key()) {
      this.hash_key = new blob(other.hash_key);
    }
    if (other.isSetKvs()) {
      java.util.List<key_value> __this__kvs = new java.util.ArrayList<key_value>(other.kvs.size());
      for (key_value other_element : other.kvs) {
        __this__kvs.add(new key_value(other_element));
      }
      this.kvs = __this__kvs;
    }
    this.expire_ts_seconds = other.expire_ts_seconds;
  }

  public multi_put_request deepCopy() {
    return new multi_put_request(this);
  }

  @Override
  public void clear() {
    this.hash_key = null;
    this.kvs = null;
    setExpire_ts_secondsIsSet(false);
    this.expire_ts_seconds = 0;
  }

  public blob getHash_key() {
    return this.hash_key;
  }

  public multi_put_request setHash_key(blob hash_key) {
    this.hash_key = hash_key;
    return this;
  }

  public void unsetHash_key() {
    this.hash_key = null;
  }

  /** Returns true if field hash_key is set (has been assigned a value) and false otherwise */
  public boolean isSetHash_key() {
    return this.hash_key != null;
  }

  public void setHash_keyIsSet(boolean value) {
    if (!value) {
      this.hash_key = null;
    }
  }

  public int getKvsSize() {
    return (this.kvs == null) ? 0 : this.kvs.size();
  }

  public java.util.Iterator<key_value> getKvsIterator() {
    return (this.kvs == null) ? null : this.kvs.iterator();
  }

  public void addToKvs(key_value elem) {
    if (this.kvs == null) {
      this.kvs = new java.util.ArrayList<key_value>();
    }
    this.kvs.add(elem);
  }

  public java.util.List<key_value> getKvs() {
    return this.kvs;
  }

  public multi_put_request setKvs(java.util.List<key_value> kvs) {
    this.kvs = kvs;
    return this;
  }

  public void unsetKvs() {
    this.kvs = null;
  }

  /** Returns true if field kvs is set (has been assigned a value) and false otherwise */
  public boolean isSetKvs() {
    return this.kvs != null;
  }

  public void setKvsIsSet(boolean value) {
    if (!value) {
      this.kvs = null;
    }
  }

  public int getExpire_ts_seconds() {
    return this.expire_ts_seconds;
  }

  public multi_put_request setExpire_ts_seconds(int expire_ts_seconds) {
    this.expire_ts_seconds = expire_ts_seconds;
    setExpire_ts_secondsIsSet(true);
    return this;
  }

  public void unsetExpire_ts_seconds() {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRE_TS_SECONDS_ISSET_ID);
  }

  /**
   * Returns true if field expire_ts_seconds is set (has been assigned a value) and false otherwise
   */
  public boolean isSetExpire_ts_seconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRE_TS_SECONDS_ISSET_ID);
  }

  public void setExpire_ts_secondsIsSet(boolean value) {
    __isset_bitfield =
        org.apache.thrift.EncodingUtils.setBit(
            __isset_bitfield, __EXPIRE_TS_SECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case HASH_KEY:
        if (value == null) {
          unsetHash_key();
        } else {
          setHash_key((blob) value);
        }
        break;

      case KVS:
        if (value == null) {
          unsetKvs();
        } else {
          setKvs((java.util.List<key_value>) value);
        }
        break;

      case EXPIRE_TS_SECONDS:
        if (value == null) {
          unsetExpire_ts_seconds();
        } else {
          setExpire_ts_seconds((java.lang.Integer) value);
        }
        break;
    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case HASH_KEY:
        return getHash_key();

      case KVS:
        return getKvs();

      case EXPIRE_TS_SECONDS:
        return getExpire_ts_seconds();
    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case HASH_KEY:
        return isSetHash_key();
      case KVS:
        return isSetKvs();
      case EXPIRE_TS_SECONDS:
        return isSetExpire_ts_seconds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null) return false;
    if (that instanceof multi_put_request) return this.equals((multi_put_request) that);
    return false;
  }

  public boolean equals(multi_put_request that) {
    if (that == null) return false;
    if (this == that) return true;

    boolean this_present_hash_key = true && this.isSetHash_key();
    boolean that_present_hash_key = true && that.isSetHash_key();
    if (this_present_hash_key || that_present_hash_key) {
      if (!(this_present_hash_key && that_present_hash_key)) return false;
      if (!this.hash_key.equals(that.hash_key)) return false;
    }

    boolean this_present_kvs = true && this.isSetKvs();
    boolean that_present_kvs = true && that.isSetKvs();
    if (this_present_kvs || that_present_kvs) {
      if (!(this_present_kvs && that_present_kvs)) return false;
      if (!this.kvs.equals(that.kvs)) return false;
    }

    boolean this_present_expire_ts_seconds = true;
    boolean that_present_expire_ts_seconds = true;
    if (this_present_expire_ts_seconds || that_present_expire_ts_seconds) {
      if (!(this_present_expire_ts_seconds && that_present_expire_ts_seconds)) return false;
      if (this.expire_ts_seconds != that.expire_ts_seconds) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHash_key()) ? 131071 : 524287);
    if (isSetHash_key()) hashCode = hashCode * 8191 + hash_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetKvs()) ? 131071 : 524287);
    if (isSetKvs()) hashCode = hashCode * 8191 + kvs.hashCode();

    hashCode = hashCode * 8191 + expire_ts_seconds;

    return hashCode;
  }

  @Override
  public int compareTo(multi_put_request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHash_key()).compareTo(other.isSetHash_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash_key, other.hash_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKvs()).compareTo(other.isSetKvs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKvs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kvs, other.kvs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison =
        java.lang.Boolean.valueOf(isSetExpire_ts_seconds())
            .compareTo(other.isSetExpire_ts_seconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpire_ts_seconds()) {
      lastComparison =
          org.apache.thrift.TBaseHelper.compareTo(this.expire_ts_seconds, other.expire_ts_seconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("multi_put_request(");
    boolean first = true;

    sb.append("hash_key:");
    if (this.hash_key == null) {
      sb.append("null");
    } else {
      sb.append(this.hash_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kvs:");
    if (this.kvs == null) {
      sb.append("null");
    } else {
      sb.append(this.kvs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expire_ts_seconds:");
    sb.append(this.expire_ts_seconds);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hash_key != null) {
      hash_key.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class multi_put_requestStandardSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    public multi_put_requestStandardScheme getScheme() {
      return new multi_put_requestStandardScheme();
    }
  }

  private static class multi_put_requestStandardScheme
      extends org.apache.thrift.scheme.StandardScheme<multi_put_request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, multi_put_request struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // HASH_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash_key = new blob();
              struct.hash_key.read(iprot);
              struct.setHash_keyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KVS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.kvs = new java.util.ArrayList<key_value>(_list0.size);
                key_value _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                  _elem1 = new key_value();
                  _elem1.read(iprot);
                  struct.kvs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setKvsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPIRE_TS_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expire_ts_seconds = iprot.readI32();
              struct.setExpire_ts_secondsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, multi_put_request struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hash_key != null) {
        oprot.writeFieldBegin(HASH_KEY_FIELD_DESC);
        struct.hash_key.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.kvs != null) {
        oprot.writeFieldBegin(KVS_FIELD_DESC);
        {
          oprot.writeListBegin(
              new org.apache.thrift.protocol.TList(
                  org.apache.thrift.protocol.TType.STRUCT, struct.kvs.size()));
          for (key_value _iter3 : struct.kvs) {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRE_TS_SECONDS_FIELD_DESC);
      oprot.writeI32(struct.expire_ts_seconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class multi_put_requestTupleSchemeFactory
      implements org.apache.thrift.scheme.SchemeFactory {
    public multi_put_requestTupleScheme getScheme() {
      return new multi_put_requestTupleScheme();
    }
  }

  private static class multi_put_requestTupleScheme
      extends org.apache.thrift.scheme.TupleScheme<multi_put_request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, multi_put_request struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHash_key()) {
        optionals.set(0);
      }
      if (struct.isSetKvs()) {
        optionals.set(1);
      }
      if (struct.isSetExpire_ts_seconds()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHash_key()) {
        struct.hash_key.write(oprot);
      }
      if (struct.isSetKvs()) {
        {
          oprot.writeI32(struct.kvs.size());
          for (key_value _iter4 : struct.kvs) {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetExpire_ts_seconds()) {
        oprot.writeI32(struct.expire_ts_seconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, multi_put_request struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot =
          (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.hash_key = new blob();
        struct.hash_key.read(iprot);
        struct.setHash_keyIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 =
              new org.apache.thrift.protocol.TList(
                  org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.kvs = new java.util.ArrayList<key_value>(_list5.size);
          key_value _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
            _elem6 = new key_value();
            _elem6.read(iprot);
            struct.kvs.add(_elem6);
          }
        }
        struct.setKvsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expire_ts_seconds = iprot.readI32();
        struct.setExpire_ts_secondsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
      org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
            ? STANDARD_SCHEME_FACTORY
            : TUPLE_SCHEME_FACTORY)
        .getScheme();
  }
}
