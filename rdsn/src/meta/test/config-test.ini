; The MIT License (MIT)
;
; Copyright (c) 2015 Microsoft Corporation
;
; -=- Robust Distributed System Nucleus (rDSN) -=-
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in
; all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
; THE SOFTWARE.

[apps..default]
run = true
count = 1
;network.client.RPC_CHANNEL_TCP = dsn::tools::sim_network_provider, 65536
;network.client.RPC_CHANNEL_UDP = dsn::tools::sim_network_provider, 65536
;network.server.0.RPC_CHANNEL_TCP = dsn::tools::sim_network_provider, 65536

[apps.test_meta]
type = test_meta
run = true
count = 1
ports = 54321
pools = THREAD_POOL_DEFAULT,THREAD_POOL_META_SERVER,THREAD_POOL_DLOCK,THREAD_POOL_META_STATE,THREAD_POOL_BLOCK_SERVICE,THREAD_POOL_META_TEST

[core]
;tool = simulator
tool = nativerun

;toollets = tracer, profiler
;fault_injector
pause_on_start = false

logging_start_level = LOG_LEVEL_DEBUG
logging_factory_name = dsn::tools::simple_logger


[tools.simple_logger]
fast_flush = true
short_header = false
stderr_start_level = LOG_LEVEL_ERROR

[tools.simulator]
random_seed = 1465902258

[tools.screen_logger]
short_header = false

[network]
; how many network threads for network library (used by asio)
io_service_worker_count = 2

[task..default]
is_trace = true
is_profile = true
allow_inline = false
rpc_call_channel = RPC_CHANNEL_TCP
rpc_message_header_format = dsn
rpc_timeout_milliseconds = 5000

[task.LPC_AIO_IMMEDIATE_CALLBACK]
is_trace = false
is_profile = false
allow_inline = false

[task.LPC_RPC_TIMEOUT]
is_trace = false
is_profile = false

; specification for each thread pool
[threadpool..default]
worker_count = 3

[threadpool.THREAD_POOL_META_STATE]
worker_count = 1

[threadpool.THREAD_POOL_DEFAULT]
partitioned = false
worker_priority = THREAD_xPRIORITY_NORMAL

[threadpool.THREAD_POOL_META_TEST]
partitioned = false
worker_count = 1

[threadpool.THREAD_POOL_DLOCK]
partitioned = true

[meta_server]
meta_state_service_type = meta_state_service_simple
server_list = 127.0.0.1:34601
cluster_root = /meta_test
meta_function_level_on_start = lively
app_balancer_in_turn = false
only_primary_balancer = false
only_move_primary = false
cold_backup_disabled = false

[replication]
cluster_name = master-cluster
duplication_enabled = true

[replication.app]
app_name = simple_kv.instance0
app_type = simple_kv
partition_count = 1
max_replica_count = 3

[zookeeper]
hosts_list = localhost:22181
;hosts_list = localhost:12181
timeout_ms = 30000
logfile = zoolog.log

[block_service.local_service]
type = local_service
args = ./block_service

[block_service.local_service_empty_root]
type = local_service
args =

[block_service.fds_service]
type = fds_service
args =

[duplication-group]
master-cluster = 1
slave-cluster  = 2
cluster_without_address_for_test = 3

[pegasus.clusters]
master-cluster = 127.0.0.1:34601
slave-cluster  = 127.0.0.1:35601
