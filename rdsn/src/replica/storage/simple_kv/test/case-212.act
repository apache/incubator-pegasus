# The MIT License (MIT)
#
# Copyright (c) 2015 Microsoft Corporation
#
# -=- Robust Distributed System Nucleus (rDSN) -=-
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Case Description: test learn

set:load_balance_for_test=1,not_exit_on_log_failure=1

wait:on_rpc_call:rpc_name=RPC_CONFIG_PROPOSAL,from=m,to=r1
set:disable_load_balance=1

# wait until r1 becomes primary
config:{1,r1,[]}
state:{{r1,pri,1,0}}

set:disable_load_balance=0
wait:on_rpc_call:rpc_name=RPC_CONFIG_PROPOSAL,from=m,to=r1
set:disable_load_balance=1

state:{{r1,pri,1,0},{r2,pot,1,0}}

config:{2,r1,[r2]}
state:{{r1,pri,2,0},{r2,sec,2,0}}

client:begin_write:id=1,key=k1,value=v1,timeout=0
client:begin_write:id=2,key=k2,value=v2,timeout=0
client:begin_write:id=3,key=k3,value=v3,timeout=0
client:begin_write:id=4,key=k4,value=v4,timeout=0
client:begin_write:id=5,key=k5,value=v5,timeout=0

# wait r2 checkpoint done
state:{{r1,pri,2,5,5},{r2,sec,2,5,5}}

# write more
client:begin_write:id=6,key=k6,value=v6,timeout=0
client:begin_write:id=7,key=k7,value=v7,timeout=0
client:begin_write:id=8,key=k8,value=v8,timeout=0
client:begin_write:id=9,key=k9,value=v9,timeout=0
client:begin_write:id=10,key=k10,value=v10,timeout=0
client:begin_write:id=11,key=k11,value=v11,timeout=0
client:begin_write:id=12,key=k12,value=v12,timeout=0
client:begin_write:id=13,key=k13,value=v13,timeout=0
client:begin_write:id=14,key=k14,value=v14,timeout=0
client:begin_write:id=15,key=k15,value=v15,timeout=0
client:begin_write:id=16,key=k16,value=v16,timeout=0
client:begin_write:id=17,key=k17,value=v17,timeout=0
client:begin_write:id=18,key=k18,value=v18,timeout=0
client:begin_write:id=19,key=k19,value=v19,timeout=0
client:begin_write:id=20,key=k20,value=v20,timeout=0

state:{{r1,pri,2,20,5},{r2,sec,2,20,5}}

# add secondary r3
# will trigger learning in on_learn():
#   learn_start_decree {=1} < _prepare_list->min_decree() {=11}
#   learn_start_decree {=1} < _app->last_durable_decree() {=5}
#   learn checkpoint + log + cache
#
#                         (5)
#   check_point  :      -->|
#                          (6)   (10)
#   private_log  :          |~~~~~|
#                                 (11)                (20)
#   prepare_list :                 |-------------------|  
#                    (1)
#   learn        :    |-->
#
#   private_log is in memory because log_private_batch_buffer_kb=4
client:replica_config:receiver=r1,type=add_secondary,node=r3
config:{3,r1,[r2,r3]}
state:{{r1,pri,3,20},{r2,sec,3,20},{r3,sec,3,20}}

# check r1 data correct
client:begin_read:id=1,key=k1,timeout=0
wait:on_rpc_call:rpc_name=RPC_SIMPLE_KV_SIMPLE_KV_READ,from=c,to=r1
client:end_read:id=1,err=err_ok,resp=v1
client:begin_read:id=2,key=k2,timeout=0
client:end_read:id=2,err=err_ok,resp=v2
client:begin_read:id=3,key=k3,timeout=0
client:end_read:id=3,err=err_ok,resp=v3
client:begin_read:id=4,key=k4,timeout=0
client:end_read:id=4,err=err_ok,resp=v4
client:begin_read:id=5,key=k5,timeout=0
client:end_read:id=5,err=err_ok,resp=v5
client:begin_read:id=6,key=k6,timeout=0
client:end_read:id=6,err=err_ok,resp=v6
client:begin_read:id=7,key=k7,timeout=0
client:end_read:id=7,err=err_ok,resp=v7
client:begin_read:id=8,key=k8,timeout=0
client:end_read:id=8,err=err_ok,resp=v8
client:begin_read:id=9,key=k9,timeout=0
client:end_read:id=9,err=err_ok,resp=v9
client:begin_read:id=10,key=k10,timeout=0
client:end_read:id=10,err=err_ok,resp=v10
client:begin_read:id=11,key=k11,timeout=0
client:end_read:id=11,err=err_ok,resp=v11
client:begin_read:id=12,key=k12,timeout=0
client:end_read:id=12,err=err_ok,resp=v12
client:begin_read:id=13,key=k13,timeout=0
client:end_read:id=13,err=err_ok,resp=v13
client:begin_read:id=14,key=k14,timeout=0
client:end_read:id=14,err=err_ok,resp=v14
client:begin_read:id=15,key=k15,timeout=0
client:end_read:id=15,err=err_ok,resp=v15
client:begin_read:id=16,key=k16,timeout=0
client:end_read:id=16,err=err_ok,resp=v16
client:begin_read:id=17,key=k17,timeout=0
client:end_read:id=17,err=err_ok,resp=v17
client:begin_read:id=18,key=k18,timeout=0
client:end_read:id=18,err=err_ok,resp=v18
client:begin_read:id=19,key=k19,timeout=0
client:end_read:id=19,err=err_ok,resp=v19
client:begin_read:id=20,key=k20,timeout=0
client:end_read:id=20,err=err_ok,resp=v20

# change primary from r1 to r3
client:replica_config:receiver=r1,type=downgrade_to_secondary,node=r1
config:{4,-,[r1,r2,r3]}
state:{{r1,sec,4,20},{r2,sec,4,20},{r3,sec,4,20}}
client:replica_config:receiver=r3,type=upgrade_to_primary,node=r3
config:{5,r3,[r1,r2]}
state:{{r1,sec,5,20},{r2,sec,5,20},{r3,pri,5,20}}

# check r3 data correct
client:begin_read:id=1,key=k1,timeout=0
wait:on_rpc_call:rpc_name=RPC_SIMPLE_KV_SIMPLE_KV_READ,from=c,to=r3
client:end_read:id=1,err=err_ok,resp=v1
client:begin_read:id=2,key=k2,timeout=0
client:end_read:id=2,err=err_ok,resp=v2
client:begin_read:id=3,key=k3,timeout=0
client:end_read:id=3,err=err_ok,resp=v3
client:begin_read:id=4,key=k4,timeout=0
client:end_read:id=4,err=err_ok,resp=v4
client:begin_read:id=5,key=k5,timeout=0
client:end_read:id=5,err=err_ok,resp=v5
client:begin_read:id=6,key=k6,timeout=0
client:end_read:id=6,err=err_ok,resp=v6
client:begin_read:id=7,key=k7,timeout=0
client:end_read:id=7,err=err_ok,resp=v7
client:begin_read:id=8,key=k8,timeout=0
client:end_read:id=8,err=err_ok,resp=v8
client:begin_read:id=9,key=k9,timeout=0
client:end_read:id=9,err=err_ok,resp=v9
client:begin_read:id=10,key=k10,timeout=0
client:end_read:id=10,err=err_ok,resp=v10
client:begin_read:id=11,key=k11,timeout=0
client:end_read:id=11,err=err_ok,resp=v11
client:begin_read:id=12,key=k12,timeout=0
client:end_read:id=12,err=err_ok,resp=v12
client:begin_read:id=13,key=k13,timeout=0
client:end_read:id=13,err=err_ok,resp=v13
client:begin_read:id=14,key=k14,timeout=0
client:end_read:id=14,err=err_ok,resp=v14
client:begin_read:id=15,key=k15,timeout=0
client:end_read:id=15,err=err_ok,resp=v15
client:begin_read:id=16,key=k16,timeout=0
client:end_read:id=16,err=err_ok,resp=v16
client:begin_read:id=17,key=k17,timeout=0
client:end_read:id=17,err=err_ok,resp=v17
client:begin_read:id=18,key=k18,timeout=0
client:end_read:id=18,err=err_ok,resp=v18
client:begin_read:id=19,key=k19,timeout=0
client:end_read:id=19,err=err_ok,resp=v19
client:begin_read:id=20,key=k20,timeout=0
client:end_read:id=20,err=err_ok,resp=v20

