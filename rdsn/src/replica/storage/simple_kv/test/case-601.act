# The MIT License (MIT)
#
# Copyright (c) 2015 Microsoft Corporation
#
# -=- Robust Distributed System Nucleus (rDSN) -=-
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Case Description:
#   learner send two successive notify_learn_completion request

set:load_balance_for_test=1,not_exit_on_log_failure=1

# Initial ballot is 0, after adding two peers, the ballot becomes 2.
# wait primary to add r3 as learner
state:{{r1,pri,2,0},{r2,sec,2,0},{r3,pot,2,0}}

# r3 learn from r1 successfully, and notify r1, but the message lost
inject:on_rpc_call:rpc_name=RPC_LEARN_COMPLETION_NOTIFY,from=r3,to=r1

# then client start to write, and the prepare message to r2 lost
client:begin_write:id=1,key=k1,timeout=0
inject:on_rpc_call:rpc_name=RPC_PREPARE,from=r1,to=r2

# r1 will first downgrade to inactive because of prepare timeout,
# then increase its ballot to 3 and upgrade again as a primary.
config:{3,r1,[]}

# after r1 update config, it will broadcast group_check, so r3
# will receive group_check as a learner
wait:on_rpc_call:rpc_name=RPC_GROUP_CHECK,from=r1,to=r3

# Again r1 will fail on prepare, and increase ballot 3->4.
config:{4,r1,[r3]}

# both r2 & r2 will be secondary eventually
config:{5,r1,[r2,r3]}
