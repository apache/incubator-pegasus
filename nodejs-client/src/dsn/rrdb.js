//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var replication_ttypes = require('./replication_types');


var ttypes = require('./rrdb_types');
//HELPER FUNCTIONS AND STRUCTURES

var rrdb_put_args = module.exports.rrdb_put_args = function(args) {
    this.update = null;
    if (args) {
        if (args.update !== undefined && args.update !== null) {
            this.update = new ttypes.update_request(args.update);
        }
    }
};
rrdb_put_args.prototype = {};
rrdb_put_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.update = new ttypes.update_request();
                this.update.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_put_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_put_args');
    if (this.update !== null && this.update !== undefined) {
        output.writeFieldBegin('update', Thrift.Type.STRUCT, 1);
        this.update.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_put_result = module.exports.rrdb_put_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.update_response(args.success);
        }
    }
};
rrdb_put_result.prototype = {};
rrdb_put_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.update_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_put_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_put_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_multi_put_args = module.exports.rrdb_multi_put_args = function(args) {
    this.request = null;
    if (args) {
        if (args.request !== undefined && args.request !== null) {
            this.request = new ttypes.multi_put_request(args.request);
        }
    }
};
rrdb_multi_put_args.prototype = {};
rrdb_multi_put_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.request = new ttypes.multi_put_request();
                this.request.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_multi_put_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_multi_put_args');
    if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_multi_put_result = module.exports.rrdb_multi_put_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.update_response(args.success);
        }
    }
};
rrdb_multi_put_result.prototype = {};
rrdb_multi_put_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.update_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_multi_put_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_multi_put_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_remove_args = module.exports.rrdb_remove_args = function(args) {
    this.key = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = new base_ttypes.blob(args.key);
        }
    }
};
rrdb_remove_args.prototype = {};
rrdb_remove_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.key = new base_ttypes.blob();
                this.key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_remove_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_remove_args');
    if (this.key !== null && this.key !== undefined) {
        output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
        this.key.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_remove_result = module.exports.rrdb_remove_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.update_response(args.success);
        }
    }
};
rrdb_remove_result.prototype = {};
rrdb_remove_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.update_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_remove_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_remove_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_multi_remove_args = function(args) {
    this.request = null;
    if (args) {
        if (args.request !== undefined && args.request !== null) {
            this.request = new ttypes.multi_remove_request(args.request);
        }
    }
};
rrdb_multi_remove_args.prototype = {};
rrdb_multi_remove_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.request = new ttypes.multi_remove_request();
                this.request.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_multi_remove_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_multi_remove_args');
    if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_multi_remove_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.multi_remove_response(args.success);
        }
    }
};
rrdb_multi_remove_result.prototype = {};
rrdb_multi_remove_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.multi_remove_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_multi_remove_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_multi_remove_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_get_args = module.exports.rrdb_get_args = function(args) {
    this.key = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = new base_ttypes.blob(args.key);
        }
    }
};
rrdb_get_args.prototype = {};
rrdb_get_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.key = new base_ttypes.blob();
                this.key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_get_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_get_args');
    if (this.key !== null && this.key !== undefined) {
        output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
        this.key.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_get_result = module.exports.rrdb_get_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.read_response(args.success);
        }
    }
};
rrdb_get_result.prototype = {};
rrdb_get_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.read_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_get_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_get_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_multi_get_args = module.exports.rrdb_multi_get_args = function(args) {
    this.request = null;
    if (args) {
        if (args.request !== undefined && args.request !== null) {
            this.request = new ttypes.multi_get_request(args.request);
        }
    }
};
rrdb_multi_get_args.prototype = {};
rrdb_multi_get_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.request = new ttypes.multi_get_request();
                this.request.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_multi_get_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_multi_get_args');
    if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_multi_get_result = module.exports.rrdb_multi_get_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.multi_get_response(args.success);
        }
    }
};
rrdb_multi_get_result.prototype = {};
rrdb_multi_get_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.multi_get_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_multi_get_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_multi_get_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_sortkey_count_args = function(args) {
    this.hash_key = null;
    if (args) {
        if (args.hash_key !== undefined && args.hash_key !== null) {
            this.hash_key = new base_ttypes.blob(args.hash_key);
        }
    }
};
rrdb_sortkey_count_args.prototype = {};
rrdb_sortkey_count_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.hash_key = new base_ttypes.blob();
                this.hash_key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_sortkey_count_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_sortkey_count_args');
    if (this.hash_key !== null && this.hash_key !== undefined) {
        output.writeFieldBegin('hash_key', Thrift.Type.STRUCT, 1);
        this.hash_key.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_sortkey_count_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.count_response(args.success);
        }
    }
};
rrdb_sortkey_count_result.prototype = {};
rrdb_sortkey_count_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.count_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_sortkey_count_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_sortkey_count_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_ttl_args = function(args) {
    this.key = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = new base_ttypes.blob(args.key);
        }
    }
};
rrdb_ttl_args.prototype = {};
rrdb_ttl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.key = new base_ttypes.blob();
                this.key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_ttl_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_ttl_args');
    if (this.key !== null && this.key !== undefined) {
        output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
        this.key.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_ttl_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.ttl_response(args.success);
        }
    }
};
rrdb_ttl_result.prototype = {};
rrdb_ttl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.ttl_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_ttl_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_ttl_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_get_scanner_args = function(args) {
    this.request = null;
    if (args) {
        if (args.request !== undefined && args.request !== null) {
            this.request = new ttypes.get_scanner_request(args.request);
        }
    }
};
rrdb_get_scanner_args.prototype = {};
rrdb_get_scanner_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.request = new ttypes.get_scanner_request();
                this.request.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_get_scanner_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_get_scanner_args');
    if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_get_scanner_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.scan_response(args.success);
        }
    }
};
rrdb_get_scanner_result.prototype = {};
rrdb_get_scanner_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.scan_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_get_scanner_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_get_scanner_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_scan_args = function(args) {
    this.request = null;
    if (args) {
        if (args.request !== undefined && args.request !== null) {
            this.request = new ttypes.scan_request(args.request);
        }
    }
};
rrdb_scan_args.prototype = {};
rrdb_scan_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.request = new ttypes.scan_request();
                this.request.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_scan_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_scan_args');
    if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_scan_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new ttypes.scan_response(args.success);
        }
    }
};
rrdb_scan_result.prototype = {};
rrdb_scan_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new ttypes.scan_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_scan_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_scan_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_clear_scanner_args = function(args) {
    this.context_id = null;
    if (args) {
        if (args.context_id !== undefined && args.context_id !== null) {
            this.context_id = args.context_id;
        }
    }
};
rrdb_clear_scanner_args.prototype = {};
rrdb_clear_scanner_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I64) {
                this.context_id = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_clear_scanner_args.prototype.write = function(output) {
    output.writeStructBegin('rrdb_clear_scanner_args');
    if (this.context_id !== null && this.context_id !== undefined) {
        output.writeFieldBegin('context_id', Thrift.Type.I64, 1);
        output.writeI64(this.context_id);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdb_clear_scanner_result = function(args) {
};
rrdb_clear_scanner_result.prototype = {};
rrdb_clear_scanner_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        input.skip(ftype);
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

rrdb_clear_scanner_result.prototype.write = function(output) {
    output.writeStructBegin('rrdb_clear_scanner_result');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rrdbClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
rrdbClient.prototype = {};
rrdbClient.prototype.seqid = function() { return this._seqid; };
rrdbClient.prototype.new_seqid = function() { return this._seqid += 1; };
rrdbClient.prototype.put = function(update, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_put(update);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_put(update);
    }
};

rrdbClient.prototype.send_put = function(update) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_put_args();
    args.update = update;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_put = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_put_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('put failed: unknown result');
};
rrdbClient.prototype.multi_put = function(request, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_multi_put(request);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_multi_put(request);
    }
};

rrdbClient.prototype.send_multi_put = function(request) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('multi_put', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_multi_put_args();
    args.request = request;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_multi_put = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_multi_put_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('multi_put failed: unknown result');
};
rrdbClient.prototype.remove = function(key, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_remove(key);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_remove(key);
    }
};

rrdbClient.prototype.send_remove = function(key) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_remove_args();
    args.key = key;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_remove = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_remove_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('remove failed: unknown result');
};
rrdbClient.prototype.multi_remove = function(request, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_multi_remove(request);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_multi_remove(request);
    }
};

rrdbClient.prototype.send_multi_remove = function(request) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('multi_remove', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_multi_remove_args();
    args.request = request;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_multi_remove = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_multi_remove_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('multi_remove failed: unknown result');
};
rrdbClient.prototype.get = function(key, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_get(key);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_get(key);
    }
};

rrdbClient.prototype.send_get = function(key) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_get_args();
    args.key = key;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_get = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_get_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('get failed: unknown result');
};
rrdbClient.prototype.multi_get = function(request, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_multi_get(request);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_multi_get(request);
    }
};

rrdbClient.prototype.send_multi_get = function(request) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('multi_get', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_multi_get_args();
    args.request = request;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_multi_get = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_multi_get_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('multi_get failed: unknown result');
};
rrdbClient.prototype.sortkey_count = function(hash_key, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_sortkey_count(hash_key);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_sortkey_count(hash_key);
    }
};

rrdbClient.prototype.send_sortkey_count = function(hash_key) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sortkey_count', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_sortkey_count_args();
    args.hash_key = hash_key;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_sortkey_count = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_sortkey_count_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('sortkey_count failed: unknown result');
};
rrdbClient.prototype.ttl = function(key, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_ttl(key);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_ttl(key);
    }
};

rrdbClient.prototype.send_ttl = function(key) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('ttl', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_ttl_args();
    args.key = key;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_ttl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_ttl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('ttl failed: unknown result');
};
rrdbClient.prototype.get_scanner = function(request, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_get_scanner(request);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_get_scanner(request);
    }
};

rrdbClient.prototype.send_get_scanner = function(request) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('get_scanner', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_get_scanner_args();
    args.request = request;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_get_scanner = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_get_scanner_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('get_scanner failed: unknown result');
};
rrdbClient.prototype.scan = function(request, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_scan(request);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_scan(request);
    }
};

rrdbClient.prototype.send_scan = function(request) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('scan', Thrift.MessageType.CALL, this.seqid());
    var args = new rrdb_scan_args();
    args.request = request;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

rrdbClient.prototype.recv_scan = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new rrdb_scan_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('scan failed: unknown result');
};
rrdbClient.prototype.clear_scanner = function(context_id, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_clear_scanner(context_id);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_clear_scanner(context_id);
    }
};

rrdbClient.prototype.send_clear_scanner = function(context_id) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('clear_scanner', Thrift.MessageType.ONEWAY, this.seqid());
    var args = new rrdb_clear_scanner_args();
    args.context_id = context_id;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};
var rrdbProcessor = exports.Processor = function(handler) {
    this._handler = handler;
}
;
rrdbProcessor.prototype.process = function(input, output) {
    var r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
        return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
        input.skip(Thrift.Type.STRUCT);
        input.readMessageEnd();
        var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
        output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
        x.write(output);
        output.writeMessageEnd();
        output.flush();
    }
}
;
rrdbProcessor.prototype.process_put = function(seqid, input, output) {
    var args = new rrdb_put_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.put.length === 1) {
        Q.fcall(this._handler.put, args.update)
            .then(function(result) {
                var result_obj = new rrdb_put_result({success: result});
                output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.put(args.update, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_put_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_multi_put = function(seqid, input, output) {
    var args = new rrdb_multi_put_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.multi_put.length === 1) {
        Q.fcall(this._handler.multi_put, args.request)
            .then(function(result) {
                var result_obj = new rrdb_multi_put_result({success: result});
                output.writeMessageBegin("multi_put", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("multi_put", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.multi_put(args.request, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_multi_put_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("multi_put", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("multi_put", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_remove = function(seqid, input, output) {
    var args = new rrdb_remove_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.remove.length === 1) {
        Q.fcall(this._handler.remove, args.key)
            .then(function(result) {
                var result_obj = new rrdb_remove_result({success: result});
                output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.remove(args.key, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_remove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_multi_remove = function(seqid, input, output) {
    var args = new rrdb_multi_remove_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.multi_remove.length === 1) {
        Q.fcall(this._handler.multi_remove, args.request)
            .then(function(result) {
                var result_obj = new rrdb_multi_remove_result({success: result});
                output.writeMessageBegin("multi_remove", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("multi_remove", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.multi_remove(args.request, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_multi_remove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("multi_remove", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("multi_remove", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_get = function(seqid, input, output) {
    var args = new rrdb_get_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get.length === 1) {
        Q.fcall(this._handler.get, args.key)
            .then(function(result) {
                var result_obj = new rrdb_get_result({success: result});
                output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.get(args.key, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_get_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_multi_get = function(seqid, input, output) {
    var args = new rrdb_multi_get_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.multi_get.length === 1) {
        Q.fcall(this._handler.multi_get, args.request)
            .then(function(result) {
                var result_obj = new rrdb_multi_get_result({success: result});
                output.writeMessageBegin("multi_get", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("multi_get", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.multi_get(args.request, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_multi_get_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("multi_get", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("multi_get", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_sortkey_count = function(seqid, input, output) {
    var args = new rrdb_sortkey_count_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sortkey_count.length === 1) {
        Q.fcall(this._handler.sortkey_count, args.hash_key)
            .then(function(result) {
                var result_obj = new rrdb_sortkey_count_result({success: result});
                output.writeMessageBegin("sortkey_count", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("sortkey_count", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.sortkey_count(args.hash_key, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_sortkey_count_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("sortkey_count", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("sortkey_count", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_ttl = function(seqid, input, output) {
    var args = new rrdb_ttl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.ttl.length === 1) {
        Q.fcall(this._handler.ttl, args.key)
            .then(function(result) {
                var result_obj = new rrdb_ttl_result({success: result});
                output.writeMessageBegin("ttl", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("ttl", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.ttl(args.key, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_ttl_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("ttl", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("ttl", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_get_scanner = function(seqid, input, output) {
    var args = new rrdb_get_scanner_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.get_scanner.length === 1) {
        Q.fcall(this._handler.get_scanner, args.request)
            .then(function(result) {
                var result_obj = new rrdb_get_scanner_result({success: result});
                output.writeMessageBegin("get_scanner", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("get_scanner", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.get_scanner(args.request, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_get_scanner_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("get_scanner", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("get_scanner", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_scan = function(seqid, input, output) {
    var args = new rrdb_scan_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.scan.length === 1) {
        Q.fcall(this._handler.scan, args.request)
            .then(function(result) {
                var result_obj = new rrdb_scan_result({success: result});
                output.writeMessageBegin("scan", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("scan", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.scan(args.request, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new rrdb_scan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("scan", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("scan", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
rrdbProcessor.prototype.process_clear_scanner = function(seqid, input, output) {
    var args = new rrdb_clear_scanner_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.clear_scanner(args.context_id);
}
;
