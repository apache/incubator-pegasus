//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var replication_ttypes = require('./replication_types');


var ttypes = module.exports = {};
var update_request = module.exports.update_request = function(args) {
    this.key = null;
    this.value = null;
    this.expire_ts_seconds = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = new base_ttypes.blob(args.key);
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new base_ttypes.blob(args.value);
        }
        if (args.expire_ts_seconds !== undefined && args.expire_ts_seconds !== null) {
            this.expire_ts_seconds = args.expire_ts_seconds;
        }
    }
};
update_request.prototype = {};
update_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.key = new base_ttypes.blob();
                this.key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRUCT) {
                this.value = new base_ttypes.blob();
                this.value.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.expire_ts_seconds = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

update_request.prototype.write = function(output) {
    output.writeStructBegin('update_request');
    if (this.key !== null && this.key !== undefined) {
        output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
        this.key.write(output);
        output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
        output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
        this.value.write(output);
        output.writeFieldEnd();
    }
    if (this.expire_ts_seconds !== null && this.expire_ts_seconds !== undefined) {
        output.writeFieldBegin('expire_ts_seconds', Thrift.Type.I32, 3);
        output.writeI32(this.expire_ts_seconds);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var update_response = module.exports.update_response = function(args) {
    this.error = null;
    this.app_id = null;
    this.partition_index = null;
    this.decree = null;
    this.server = null;
    if (args) {
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_index !== undefined && args.partition_index !== null) {
            this.partition_index = args.partition_index;
        }
        if (args.decree !== undefined && args.decree !== null) {
            this.decree = args.decree;
        }
        if (args.server !== undefined && args.server !== null) {
            this.server = args.server;
        }
    }
};
update_response.prototype = {};
update_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.error = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.partition_index = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I64) {
                this.decree = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.STRING) {
                this.server = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

update_response.prototype.write = function(output) {
    output.writeStructBegin('update_response');
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.I32, 1);
        output.writeI32(this.error);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 2);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_index !== null && this.partition_index !== undefined) {
        output.writeFieldBegin('partition_index', Thrift.Type.I32, 3);
        output.writeI32(this.partition_index);
        output.writeFieldEnd();
    }
    if (this.decree !== null && this.decree !== undefined) {
        output.writeFieldBegin('decree', Thrift.Type.I64, 4);
        output.writeI64(this.decree);
        output.writeFieldEnd();
    }
    if (this.server !== null && this.server !== undefined) {
        output.writeFieldBegin('server', Thrift.Type.STRING, 5);
        output.writeString(this.server);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var read_response = module.exports.read_response = function(args) {
    this.error = null;
    this.value = null;
    this.app_id = null;
    this.partition_index = null;
    this.server = null;
    if (args) {
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new base_ttypes.blob(args.value);
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_index !== undefined && args.partition_index !== null) {
            this.partition_index = args.partition_index;
        }
        if (args.server !== undefined && args.server !== null) {
            this.server = args.server;
        }
    }
};
read_response.prototype = {};
read_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.error = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRUCT) {
                this.value = new base_ttypes.blob();
                this.value.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.partition_index = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.server = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

read_response.prototype.write = function(output) {
    output.writeStructBegin('read_response');
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.I32, 1);
        output.writeI32(this.error);
        output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
        output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
        this.value.write(output);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 3);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_index !== null && this.partition_index !== undefined) {
        output.writeFieldBegin('partition_index', Thrift.Type.I32, 4);
        output.writeI32(this.partition_index);
        output.writeFieldEnd();
    }
    if (this.server !== null && this.server !== undefined) {
        output.writeFieldBegin('server', Thrift.Type.STRING, 6);
        output.writeString(this.server);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var ttl_response = module.exports.ttl_response = function(args) {
    this.error = null;
    this.ttl_seconds = null;
    this.app_id = null;
    this.partition_index = null;
    this.server = null;
    if (args) {
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
        if (args.ttl_seconds !== undefined && args.ttl_seconds !== null) {
            this.ttl_seconds = args.ttl_seconds;
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_index !== undefined && args.partition_index !== null) {
            this.partition_index = args.partition_index;
        }
        if (args.server !== undefined && args.server !== null) {
            this.server = args.server;
        }
    }
};
ttl_response.prototype = {};
ttl_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.error = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I32) {
                this.ttl_seconds = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.partition_index = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.server = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

ttl_response.prototype.write = function(output) {
    output.writeStructBegin('ttl_response');
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.I32, 1);
        output.writeI32(this.error);
        output.writeFieldEnd();
    }
    if (this.ttl_seconds !== null && this.ttl_seconds !== undefined) {
        output.writeFieldBegin('ttl_seconds', Thrift.Type.I32, 2);
        output.writeI32(this.ttl_seconds);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 3);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_index !== null && this.partition_index !== undefined) {
        output.writeFieldBegin('partition_index', Thrift.Type.I32, 4);
        output.writeI32(this.partition_index);
        output.writeFieldEnd();
    }
    if (this.server !== null && this.server !== undefined) {
        output.writeFieldBegin('server', Thrift.Type.STRING, 6);
        output.writeString(this.server);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var count_response = module.exports.count_response = function(args) {
    this.error = null;
    this.count = null;
    this.app_id = null;
    this.partition_index = null;
    this.server = null;
    if (args) {
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
        if (args.count !== undefined && args.count !== null) {
            this.count = args.count;
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_index !== undefined && args.partition_index !== null) {
            this.partition_index = args.partition_index;
        }
        if (args.server !== undefined && args.server !== null) {
            this.server = args.server;
        }
    }
};
count_response.prototype = {};
count_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.error = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I64) {
                this.count = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.partition_index = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.server = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

count_response.prototype.write = function(output) {
    output.writeStructBegin('count_response');
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.I32, 1);
        output.writeI32(this.error);
        output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
        output.writeFieldBegin('count', Thrift.Type.I64, 2);
        output.writeI64(this.count);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 3);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_index !== null && this.partition_index !== undefined) {
        output.writeFieldBegin('partition_index', Thrift.Type.I32, 4);
        output.writeI32(this.partition_index);
        output.writeFieldEnd();
    }
    if (this.server !== null && this.server !== undefined) {
        output.writeFieldBegin('server', Thrift.Type.STRING, 6);
        output.writeString(this.server);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var key_value = module.exports.key_value = function(args) {
    this.key = null;
    this.value = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = new base_ttypes.blob(args.key);
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new base_ttypes.blob(args.value);
        }
    }
};
key_value.prototype = {};
key_value.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.key = new base_ttypes.blob();
                this.key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRUCT) {
                this.value = new base_ttypes.blob();
                this.value.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

key_value.prototype.write = function(output) {
    output.writeStructBegin('key_value');
    if (this.key !== null && this.key !== undefined) {
        output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
        this.key.write(output);
        output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
        output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
        this.value.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var multi_put_request = module.exports.multi_put_request = function(args) {
    this.hash_key = null;
    this.kvs = null;
    this.expire_ts_seconds = null;
    if (args) {
        if (args.hash_key !== undefined && args.hash_key !== null) {
            this.hash_key = new base_ttypes.blob(args.hash_key);
        }
        if (args.kvs !== undefined && args.kvs !== null) {
            this.kvs = Thrift.copyList(args.kvs, [ttypes.key_value]);
        }
        if (args.expire_ts_seconds !== undefined && args.expire_ts_seconds !== null) {
            this.expire_ts_seconds = args.expire_ts_seconds;
        }
    }
};
multi_put_request.prototype = {};
multi_put_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.hash_key = new base_ttypes.blob();
                this.hash_key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size0 = 0;
                var _rtmp34;
                this.kvs = [];
                var _etype3 = 0;
                _rtmp34 = input.readListBegin();
                _etype3 = _rtmp34.etype;
                _size0 = _rtmp34.size;
                for (var _i5 = 0; _i5 < _size0; ++_i5)
                {
                    var elem6 = null;
                    elem6 = new ttypes.key_value();
                    elem6.read(input);
                    this.kvs.push(elem6);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.expire_ts_seconds = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

multi_put_request.prototype.write = function(output) {
    output.writeStructBegin('multi_put_request');
    if (this.hash_key !== null && this.hash_key !== undefined) {
        output.writeFieldBegin('hash_key', Thrift.Type.STRUCT, 1);
        this.hash_key.write(output);
        output.writeFieldEnd();
    }
    if (this.kvs !== null && this.kvs !== undefined) {
        output.writeFieldBegin('kvs', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.kvs.length);
        for (var iter7 in this.kvs)
        {
            if (this.kvs.hasOwnProperty(iter7))
            {
                iter7 = this.kvs[iter7];
                iter7.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.expire_ts_seconds !== null && this.expire_ts_seconds !== undefined) {
        output.writeFieldBegin('expire_ts_seconds', Thrift.Type.I32, 3);
        output.writeI32(this.expire_ts_seconds);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var multi_remove_request = module.exports.multi_remove_request = function(args) {
    this.hash_key = null;
    this.sork_keys = null;
    this.max_count = null;
    if (args) {
        if (args.hash_key !== undefined && args.hash_key !== null) {
            this.hash_key = new base_ttypes.blob(args.hash_key);
        }
        if (args.sork_keys !== undefined && args.sork_keys !== null) {
            this.sork_keys = Thrift.copyList(args.sork_keys, [base_ttypes.blob]);
        }
        if (args.max_count !== undefined && args.max_count !== null) {
            this.max_count = args.max_count;
        }
    }
};
multi_remove_request.prototype = {};
multi_remove_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.hash_key = new base_ttypes.blob();
                this.hash_key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size8 = 0;
                var _rtmp312;
                this.sork_keys = [];
                var _etype11 = 0;
                _rtmp312 = input.readListBegin();
                _etype11 = _rtmp312.etype;
                _size8 = _rtmp312.size;
                for (var _i13 = 0; _i13 < _size8; ++_i13)
                {
                    var elem14 = null;
                    elem14 = new base_ttypes.blob();
                    elem14.read(input);
                    this.sork_keys.push(elem14);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I64) {
                this.max_count = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

multi_remove_request.prototype.write = function(output) {
    output.writeStructBegin('multi_remove_request');
    if (this.hash_key !== null && this.hash_key !== undefined) {
        output.writeFieldBegin('hash_key', Thrift.Type.STRUCT, 1);
        this.hash_key.write(output);
        output.writeFieldEnd();
    }
    if (this.sork_keys !== null && this.sork_keys !== undefined) {
        output.writeFieldBegin('sork_keys', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.sork_keys.length);
        for (var iter15 in this.sork_keys)
        {
            if (this.sork_keys.hasOwnProperty(iter15))
            {
                iter15 = this.sork_keys[iter15];
                iter15.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.max_count !== null && this.max_count !== undefined) {
        output.writeFieldBegin('max_count', Thrift.Type.I64, 3);
        output.writeI64(this.max_count);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var multi_remove_response = module.exports.multi_remove_response = function(args) {
    this.error = null;
    this.count = null;
    this.app_id = null;
    this.partition_index = null;
    this.decree = null;
    this.server = null;
    if (args) {
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
        if (args.count !== undefined && args.count !== null) {
            this.count = args.count;
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_index !== undefined && args.partition_index !== null) {
            this.partition_index = args.partition_index;
        }
        if (args.decree !== undefined && args.decree !== null) {
            this.decree = args.decree;
        }
        if (args.server !== undefined && args.server !== null) {
            this.server = args.server;
        }
    }
};
multi_remove_response.prototype = {};
multi_remove_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.error = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I64) {
                this.count = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.partition_index = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I64) {
                this.decree = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.server = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

multi_remove_response.prototype.write = function(output) {
    output.writeStructBegin('multi_remove_response');
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.I32, 1);
        output.writeI32(this.error);
        output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
        output.writeFieldBegin('count', Thrift.Type.I64, 2);
        output.writeI64(this.count);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 3);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_index !== null && this.partition_index !== undefined) {
        output.writeFieldBegin('partition_index', Thrift.Type.I32, 4);
        output.writeI32(this.partition_index);
        output.writeFieldEnd();
    }
    if (this.decree !== null && this.decree !== undefined) {
        output.writeFieldBegin('decree', Thrift.Type.I64, 5);
        output.writeI64(this.decree);
        output.writeFieldEnd();
    }
    if (this.server !== null && this.server !== undefined) {
        output.writeFieldBegin('server', Thrift.Type.STRING, 6);
        output.writeString(this.server);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var multi_get_request = module.exports.multi_get_request = function(args) {
    this.hash_key = null;
    this.sork_keys = null;
    this.max_kv_count = null;
    this.max_kv_size = null;
    this.no_value = null;
    if (args) {
        if (args.hash_key !== undefined && args.hash_key !== null) {
            this.hash_key = new base_ttypes.blob(args.hash_key);
        }
        if (args.sork_keys !== undefined && args.sork_keys !== null) {
            this.sork_keys = Thrift.copyList(args.sork_keys, [base_ttypes.blob]);
        }
        if (args.max_kv_count !== undefined && args.max_kv_count !== null) {
            this.max_kv_count = args.max_kv_count;
        }
        if (args.max_kv_size !== undefined && args.max_kv_size !== null) {
            this.max_kv_size = args.max_kv_size;
        }
        if (args.no_value !== undefined && args.no_value !== null) {
            this.no_value = args.no_value;
        }
    }
};
multi_get_request.prototype = {};
multi_get_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.hash_key = new base_ttypes.blob();
                this.hash_key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size16 = 0;
                var _rtmp320;
                this.sork_keys = [];
                var _etype19 = 0;
                _rtmp320 = input.readListBegin();
                _etype19 = _rtmp320.etype;
                _size16 = _rtmp320.size;
                for (var _i21 = 0; _i21 < _size16; ++_i21)
                {
                    var elem22 = null;
                    elem22 = new base_ttypes.blob();
                    elem22.read(input);
                    this.sork_keys.push(elem22);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.max_kv_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.max_kv_size = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.BOOL) {
                this.no_value = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

multi_get_request.prototype.write = function(output) {
    output.writeStructBegin('multi_get_request');
    if (this.hash_key !== null && this.hash_key !== undefined) {
        output.writeFieldBegin('hash_key', Thrift.Type.STRUCT, 1);
        this.hash_key.write(output);
        output.writeFieldEnd();
    }
    if (this.sork_keys !== null && this.sork_keys !== undefined) {
        output.writeFieldBegin('sork_keys', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.sork_keys.length);
        for (var iter23 in this.sork_keys)
        {
            if (this.sork_keys.hasOwnProperty(iter23))
            {
                iter23 = this.sork_keys[iter23];
                iter23.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.max_kv_count !== null && this.max_kv_count !== undefined) {
        output.writeFieldBegin('max_kv_count', Thrift.Type.I32, 3);
        output.writeI32(this.max_kv_count);
        output.writeFieldEnd();
    }
    if (this.max_kv_size !== null && this.max_kv_size !== undefined) {
        output.writeFieldBegin('max_kv_size', Thrift.Type.I32, 4);
        output.writeI32(this.max_kv_size);
        output.writeFieldEnd();
    }
    if (this.no_value !== null && this.no_value !== undefined) {
        output.writeFieldBegin('no_value', Thrift.Type.BOOL, 5);
        output.writeBool(this.no_value);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var multi_get_response = module.exports.multi_get_response = function(args) {
    this.error = null;
    this.kvs = null;
    this.app_id = null;
    this.partition_index = null;
    this.server = null;
    if (args) {
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
        if (args.kvs !== undefined && args.kvs !== null) {
            this.kvs = Thrift.copyList(args.kvs, [ttypes.key_value]);
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_index !== undefined && args.partition_index !== null) {
            this.partition_index = args.partition_index;
        }
        if (args.server !== undefined && args.server !== null) {
            this.server = args.server;
        }
    }
};
multi_get_response.prototype = {};
multi_get_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.error = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size24 = 0;
                var _rtmp328;
                this.kvs = [];
                var _etype27 = 0;
                _rtmp328 = input.readListBegin();
                _etype27 = _rtmp328.etype;
                _size24 = _rtmp328.size;
                for (var _i29 = 0; _i29 < _size24; ++_i29)
                {
                    var elem30 = null;
                    elem30 = new ttypes.key_value();
                    elem30.read(input);
                    this.kvs.push(elem30);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.partition_index = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.server = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

multi_get_response.prototype.write = function(output) {
    output.writeStructBegin('multi_get_response');
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.I32, 1);
        output.writeI32(this.error);
        output.writeFieldEnd();
    }
    if (this.kvs !== null && this.kvs !== undefined) {
        output.writeFieldBegin('kvs', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.kvs.length);
        for (var iter31 in this.kvs)
        {
            if (this.kvs.hasOwnProperty(iter31))
            {
                iter31 = this.kvs[iter31];
                iter31.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 3);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_index !== null && this.partition_index !== undefined) {
        output.writeFieldBegin('partition_index', Thrift.Type.I32, 4);
        output.writeI32(this.partition_index);
        output.writeFieldEnd();
    }
    if (this.server !== null && this.server !== undefined) {
        output.writeFieldBegin('server', Thrift.Type.STRING, 6);
        output.writeString(this.server);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var get_scanner_request = module.exports.get_scanner_request = function(args) {
    this.start_key = null;
    this.stop_key = null;
    this.start_inclusive = null;
    this.stop_inclusive = null;
    this.batch_size = null;
    if (args) {
        if (args.start_key !== undefined && args.start_key !== null) {
            this.start_key = new base_ttypes.blob(args.start_key);
        }
        if (args.stop_key !== undefined && args.stop_key !== null) {
            this.stop_key = new base_ttypes.blob(args.stop_key);
        }
        if (args.start_inclusive !== undefined && args.start_inclusive !== null) {
            this.start_inclusive = args.start_inclusive;
        }
        if (args.stop_inclusive !== undefined && args.stop_inclusive !== null) {
            this.stop_inclusive = args.stop_inclusive;
        }
        if (args.batch_size !== undefined && args.batch_size !== null) {
            this.batch_size = args.batch_size;
        }
    }
};
get_scanner_request.prototype = {};
get_scanner_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.start_key = new base_ttypes.blob();
                this.start_key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRUCT) {
                this.stop_key = new base_ttypes.blob();
                this.stop_key.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.BOOL) {
                this.start_inclusive = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.BOOL) {
                this.stop_inclusive = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I32) {
                this.batch_size = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

get_scanner_request.prototype.write = function(output) {
    output.writeStructBegin('get_scanner_request');
    if (this.start_key !== null && this.start_key !== undefined) {
        output.writeFieldBegin('start_key', Thrift.Type.STRUCT, 1);
        this.start_key.write(output);
        output.writeFieldEnd();
    }
    if (this.stop_key !== null && this.stop_key !== undefined) {
        output.writeFieldBegin('stop_key', Thrift.Type.STRUCT, 2);
        this.stop_key.write(output);
        output.writeFieldEnd();
    }
    if (this.start_inclusive !== null && this.start_inclusive !== undefined) {
        output.writeFieldBegin('start_inclusive', Thrift.Type.BOOL, 3);
        output.writeBool(this.start_inclusive);
        output.writeFieldEnd();
    }
    if (this.stop_inclusive !== null && this.stop_inclusive !== undefined) {
        output.writeFieldBegin('stop_inclusive', Thrift.Type.BOOL, 4);
        output.writeBool(this.stop_inclusive);
        output.writeFieldEnd();
    }
    if (this.batch_size !== null && this.batch_size !== undefined) {
        output.writeFieldBegin('batch_size', Thrift.Type.I32, 5);
        output.writeI32(this.batch_size);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var scan_request = module.exports.scan_request = function(args) {
    this.context_id = null;
    if (args) {
        if (args.context_id !== undefined && args.context_id !== null) {
            this.context_id = args.context_id;
        }
    }
};
scan_request.prototype = {};
scan_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I64) {
                this.context_id = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

scan_request.prototype.write = function(output) {
    output.writeStructBegin('scan_request');
    if (this.context_id !== null && this.context_id !== undefined) {
        output.writeFieldBegin('context_id', Thrift.Type.I64, 1);
        output.writeI64(this.context_id);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var scan_response = module.exports.scan_response = function(args) {
    this.error = null;
    this.kvs = null;
    this.context_id = null;
    this.app_id = null;
    this.partition_index = null;
    this.server = null;
    if (args) {
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
        if (args.kvs !== undefined && args.kvs !== null) {
            this.kvs = Thrift.copyList(args.kvs, [ttypes.key_value]);
        }
        if (args.context_id !== undefined && args.context_id !== null) {
            this.context_id = args.context_id;
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_index !== undefined && args.partition_index !== null) {
            this.partition_index = args.partition_index;
        }
        if (args.server !== undefined && args.server !== null) {
            this.server = args.server;
        }
    }
};
scan_response.prototype = {};
scan_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.error = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size32 = 0;
                var _rtmp336;
                this.kvs = [];
                var _etype35 = 0;
                _rtmp336 = input.readListBegin();
                _etype35 = _rtmp336.etype;
                _size32 = _rtmp336.size;
                for (var _i37 = 0; _i37 < _size32; ++_i37)
                {
                    var elem38 = null;
                    elem38 = new ttypes.key_value();
                    elem38.read(input);
                    this.kvs.push(elem38);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I64) {
                this.context_id = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I32) {
                this.partition_index = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.server = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

scan_response.prototype.write = function(output) {
    output.writeStructBegin('scan_response');
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.I32, 1);
        output.writeI32(this.error);
        output.writeFieldEnd();
    }
    if (this.kvs !== null && this.kvs !== undefined) {
        output.writeFieldBegin('kvs', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.kvs.length);
        for (var iter39 in this.kvs)
        {
            if (this.kvs.hasOwnProperty(iter39))
            {
                iter39 = this.kvs[iter39];
                iter39.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.context_id !== null && this.context_id !== undefined) {
        output.writeFieldBegin('context_id', Thrift.Type.I64, 3);
        output.writeI64(this.context_id);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 4);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_index !== null && this.partition_index !== undefined) {
        output.writeFieldBegin('partition_index', Thrift.Type.I32, 5);
        output.writeI32(this.partition_index);
        output.writeFieldEnd();
    }
    if (this.server !== null && this.server !== undefined) {
        output.writeFieldBegin('server', Thrift.Type.STRING, 6);
        output.writeString(this.server);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

