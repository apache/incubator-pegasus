//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var replication_ttypes = require('./replication_types');


var ttypes = require('./rrdb_types');
//HELPER FUNCTIONS AND STRUCTURES

var meta_query_cfg_args = module.exports.meta_query_cfg_args = function(args) {
    this.query = null;
    if (args) {
        if (args.query !== undefined && args.query !== null) {
            this.query = new replication_ttypes.query_cfg_request(args.query);
        }
    }
};
meta_query_cfg_args.prototype = {};
meta_query_cfg_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.query = new replication_ttypes.query_cfg_request();
                this.query.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_query_cfg_args.prototype.write = function(output) {
    output.writeStructBegin('meta_query_cfg_args');
    if (this.query !== null && this.query !== undefined) {
        output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
        this.query.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_query_cfg_result = module.exports.meta_query_cfg_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.query_cfg_response(args.success);
        }
    }
};
meta_query_cfg_result.prototype = {};
meta_query_cfg_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.query_cfg_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_query_cfg_result.prototype.write = function(output) {
    output.writeStructBegin('meta_query_cfg_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_create_app_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_create_app_request(args.req);
        }
    }
};
meta_create_app_args.prototype = {};
meta_create_app_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_create_app_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_create_app_args.prototype.write = function(output) {
    output.writeStructBegin('meta_create_app_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_create_app_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_create_app_response(args.success);
        }
    }
};
meta_create_app_result.prototype = {};
meta_create_app_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_create_app_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_create_app_result.prototype.write = function(output) {
    output.writeStructBegin('meta_create_app_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_list_apps_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_list_apps_request(args.req);
        }
    }
};
meta_list_apps_args.prototype = {};
meta_list_apps_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_list_apps_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_list_apps_args.prototype.write = function(output) {
    output.writeStructBegin('meta_list_apps_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_list_apps_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_list_apps_response(args.success);
        }
    }
};
meta_list_apps_result.prototype = {};
meta_list_apps_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_list_apps_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_list_apps_result.prototype.write = function(output) {
    output.writeStructBegin('meta_list_apps_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_drop_app_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_drop_app_request(args.req);
        }
    }
};
meta_drop_app_args.prototype = {};
meta_drop_app_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_drop_app_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_drop_app_args.prototype.write = function(output) {
    output.writeStructBegin('meta_drop_app_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_drop_app_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_drop_app_response(args.success);
        }
    }
};
meta_drop_app_result.prototype = {};
meta_drop_app_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_drop_app_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_drop_app_result.prototype.write = function(output) {
    output.writeStructBegin('meta_drop_app_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_recall_app_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_recall_app_request(args.req);
        }
    }
};
meta_recall_app_args.prototype = {};
meta_recall_app_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_recall_app_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_recall_app_args.prototype.write = function(output) {
    output.writeStructBegin('meta_recall_app_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_recall_app_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_recall_app_response(args.success);
        }
    }
};
meta_recall_app_result.prototype = {};
meta_recall_app_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_recall_app_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_recall_app_result.prototype.write = function(output) {
    output.writeStructBegin('meta_recall_app_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_query_backup_policy_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_query_backup_policy_request(args.req);
        }
    }
};
meta_query_backup_policy_args.prototype = {};
meta_query_backup_policy_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_query_backup_policy_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_query_backup_policy_args.prototype.write = function(output) {
    output.writeStructBegin('meta_query_backup_policy_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_query_backup_policy_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_query_backup_policy_response(args.success);
        }
    }
};
meta_query_backup_policy_result.prototype = {};
meta_query_backup_policy_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_query_backup_policy_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_query_backup_policy_result.prototype.write = function(output) {
    output.writeStructBegin('meta_query_backup_policy_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_add_backup_policy_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_add_backup_policy_request(args.req);
        }
    }
};
meta_add_backup_policy_args.prototype = {};
meta_add_backup_policy_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_add_backup_policy_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_add_backup_policy_args.prototype.write = function(output) {
    output.writeStructBegin('meta_add_backup_policy_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_add_backup_policy_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_add_backup_policy_response(args.success);
        }
    }
};
meta_add_backup_policy_result.prototype = {};
meta_add_backup_policy_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_add_backup_policy_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_add_backup_policy_result.prototype.write = function(output) {
    output.writeStructBegin('meta_add_backup_policy_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_modify_backup_policy_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_modify_backup_policy_request(args.req);
        }
    }
};
meta_modify_backup_policy_args.prototype = {};
meta_modify_backup_policy_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_modify_backup_policy_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_modify_backup_policy_args.prototype.write = function(output) {
    output.writeStructBegin('meta_modify_backup_policy_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_modify_backup_policy_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_modify_backup_policy_response(args.success);
        }
    }
};
meta_modify_backup_policy_result.prototype = {};
meta_modify_backup_policy_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_modify_backup_policy_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_modify_backup_policy_result.prototype.write = function(output) {
    output.writeStructBegin('meta_modify_backup_policy_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_start_restore_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_restore_request(args.req);
        }
    }
};
meta_start_restore_args.prototype = {};
meta_start_restore_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_restore_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_start_restore_args.prototype.write = function(output) {
    output.writeStructBegin('meta_start_restore_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_start_restore_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_create_app_response(args.success);
        }
    }
};
meta_start_restore_result.prototype = {};
meta_start_restore_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_create_app_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_start_restore_result.prototype.write = function(output) {
    output.writeStructBegin('meta_start_restore_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_query_restore_args = function(args) {
    this.req = null;
    if (args) {
        if (args.req !== undefined && args.req !== null) {
            this.req = new replication_ttypes.configuration_query_restore_request(args.req);
        }
    }
};
meta_query_restore_args.prototype = {};
meta_query_restore_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.req = new replication_ttypes.configuration_query_restore_request();
                this.req.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_query_restore_args.prototype.write = function(output) {
    output.writeStructBegin('meta_query_restore_args');
    if (this.req !== null && this.req !== undefined) {
        output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
        this.req.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var meta_query_restore_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new replication_ttypes.configuration_query_restore_response(args.success);
        }
    }
};
meta_query_restore_result.prototype = {};
meta_query_restore_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 0:
            if (ftype == Thrift.Type.STRUCT) {
                this.success = new replication_ttypes.configuration_query_restore_response();
                this.success.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

meta_query_restore_result.prototype.write = function(output) {
    output.writeStructBegin('meta_query_restore_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var metaClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
metaClient.prototype = {};
metaClient.prototype.seqid = function() { return this._seqid; };
metaClient.prototype.new_seqid = function() { return this._seqid += 1; };
metaClient.prototype.query_cfg = function(query, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_query_cfg(query);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_query_cfg(query);
    }
};

metaClient.prototype.send_query_cfg = function(query) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('query_cfg', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_query_cfg_args();
    args.query = query;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_query_cfg = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_query_cfg_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('query_cfg failed: unknown result');
};
metaClient.prototype.create_app = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_create_app(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_create_app(req);
    }
};

metaClient.prototype.send_create_app = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('create_app', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_create_app_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_create_app = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_create_app_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('create_app failed: unknown result');
};
metaClient.prototype.list_apps = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_list_apps(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_list_apps(req);
    }
};

metaClient.prototype.send_list_apps = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('list_apps', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_list_apps_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_list_apps = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_list_apps_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('list_apps failed: unknown result');
};
metaClient.prototype.drop_app = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_drop_app(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_drop_app(req);
    }
};

metaClient.prototype.send_drop_app = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('drop_app', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_drop_app_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_drop_app = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_drop_app_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('drop_app failed: unknown result');
};
metaClient.prototype.recall_app = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_recall_app(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_recall_app(req);
    }
};

metaClient.prototype.send_recall_app = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('recall_app', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_recall_app_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_recall_app = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_recall_app_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('recall_app failed: unknown result');
};
metaClient.prototype.query_backup_policy = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_query_backup_policy(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_query_backup_policy(req);
    }
};

metaClient.prototype.send_query_backup_policy = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('query_backup_policy', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_query_backup_policy_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_query_backup_policy = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_query_backup_policy_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('query_backup_policy failed: unknown result');
};
metaClient.prototype.add_backup_policy = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_add_backup_policy(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_add_backup_policy(req);
    }
};

metaClient.prototype.send_add_backup_policy = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('add_backup_policy', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_add_backup_policy_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_add_backup_policy = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_add_backup_policy_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('add_backup_policy failed: unknown result');
};
metaClient.prototype.modify_backup_policy = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_modify_backup_policy(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_modify_backup_policy(req);
    }
};

metaClient.prototype.send_modify_backup_policy = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('modify_backup_policy', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_modify_backup_policy_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_modify_backup_policy = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_modify_backup_policy_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('modify_backup_policy failed: unknown result');
};
metaClient.prototype.start_restore = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_start_restore(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_start_restore(req);
    }
};

metaClient.prototype.send_start_restore = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('start_restore', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_start_restore_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_start_restore = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_start_restore_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('start_restore failed: unknown result');
};
metaClient.prototype.query_restore = function(req, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
            if (error) {
                _defer.reject(error);
            } else {
                _defer.resolve(result);
            }
        };
        this.send_query_restore(req);
        return _defer.promise;
    } else {
        this._reqs[this.seqid()] = callback;
        this.send_query_restore(req);
    }
};

metaClient.prototype.send_query_restore = function(req) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('query_restore', Thrift.MessageType.CALL, this.seqid());
    var args = new meta_query_restore_args();
    args.req = req;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

metaClient.prototype.recv_query_restore = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    var result = new meta_query_restore_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('query_restore failed: unknown result');
};
var metaProcessor = exports.Processor = function(handler) {
    this._handler = handler;
}
;
metaProcessor.prototype.process = function(input, output) {
    var r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
        return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
        input.skip(Thrift.Type.STRUCT);
        input.readMessageEnd();
        var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
        output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
        x.write(output);
        output.writeMessageEnd();
        output.flush();
    }
}
;
metaProcessor.prototype.process_query_cfg = function(seqid, input, output) {
    var args = new meta_query_cfg_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.query_cfg.length === 1) {
        Q.fcall(this._handler.query_cfg, args.query)
            .then(function(result) {
                var result_obj = new meta_query_cfg_result({success: result});
                output.writeMessageBegin("query_cfg", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("query_cfg", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.query_cfg(args.query, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_query_cfg_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("query_cfg", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("query_cfg", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_create_app = function(seqid, input, output) {
    var args = new meta_create_app_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.create_app.length === 1) {
        Q.fcall(this._handler.create_app, args.req)
            .then(function(result) {
                var result_obj = new meta_create_app_result({success: result});
                output.writeMessageBegin("create_app", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("create_app", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.create_app(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_create_app_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("create_app", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("create_app", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_list_apps = function(seqid, input, output) {
    var args = new meta_list_apps_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.list_apps.length === 1) {
        Q.fcall(this._handler.list_apps, args.req)
            .then(function(result) {
                var result_obj = new meta_list_apps_result({success: result});
                output.writeMessageBegin("list_apps", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("list_apps", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.list_apps(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_list_apps_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("list_apps", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("list_apps", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_drop_app = function(seqid, input, output) {
    var args = new meta_drop_app_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.drop_app.length === 1) {
        Q.fcall(this._handler.drop_app, args.req)
            .then(function(result) {
                var result_obj = new meta_drop_app_result({success: result});
                output.writeMessageBegin("drop_app", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("drop_app", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.drop_app(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_drop_app_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("drop_app", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("drop_app", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_recall_app = function(seqid, input, output) {
    var args = new meta_recall_app_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.recall_app.length === 1) {
        Q.fcall(this._handler.recall_app, args.req)
            .then(function(result) {
                var result_obj = new meta_recall_app_result({success: result});
                output.writeMessageBegin("recall_app", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("recall_app", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.recall_app(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_recall_app_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("recall_app", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("recall_app", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_query_backup_policy = function(seqid, input, output) {
    var args = new meta_query_backup_policy_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.query_backup_policy.length === 1) {
        Q.fcall(this._handler.query_backup_policy, args.req)
            .then(function(result) {
                var result_obj = new meta_query_backup_policy_result({success: result});
                output.writeMessageBegin("query_backup_policy", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("query_backup_policy", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.query_backup_policy(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_query_backup_policy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("query_backup_policy", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("query_backup_policy", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_add_backup_policy = function(seqid, input, output) {
    var args = new meta_add_backup_policy_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.add_backup_policy.length === 1) {
        Q.fcall(this._handler.add_backup_policy, args.req)
            .then(function(result) {
                var result_obj = new meta_add_backup_policy_result({success: result});
                output.writeMessageBegin("add_backup_policy", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("add_backup_policy", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.add_backup_policy(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_add_backup_policy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("add_backup_policy", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("add_backup_policy", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_modify_backup_policy = function(seqid, input, output) {
    var args = new meta_modify_backup_policy_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.modify_backup_policy.length === 1) {
        Q.fcall(this._handler.modify_backup_policy, args.req)
            .then(function(result) {
                var result_obj = new meta_modify_backup_policy_result({success: result});
                output.writeMessageBegin("modify_backup_policy", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("modify_backup_policy", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.modify_backup_policy(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_modify_backup_policy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("modify_backup_policy", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("modify_backup_policy", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_start_restore = function(seqid, input, output) {
    var args = new meta_start_restore_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.start_restore.length === 1) {
        Q.fcall(this._handler.start_restore, args.req)
            .then(function(result) {
                var result_obj = new meta_start_restore_result({success: result});
                output.writeMessageBegin("start_restore", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("start_restore", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.start_restore(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_start_restore_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("start_restore", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("start_restore", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
metaProcessor.prototype.process_query_restore = function(seqid, input, output) {
    var args = new meta_query_restore_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.query_restore.length === 1) {
        Q.fcall(this._handler.query_restore, args.req)
            .then(function(result) {
                var result_obj = new meta_query_restore_result({success: result});
                output.writeMessageBegin("query_restore", Thrift.MessageType.REPLY, seqid);
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            }, function (err) {
                var result;
                result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("query_restore", Thrift.MessageType.EXCEPTION, seqid);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
            });
    } else {
        this._handler.query_restore(args.req, function (err, result) {
            var result_obj;
            if ((err === null || typeof err === 'undefined')) {
                result_obj = new meta_query_restore_result((err !== null || typeof err === 'undefined') ? err : {success: result});
                output.writeMessageBegin("query_restore", Thrift.MessageType.REPLY, seqid);
            } else {
                result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("query_restore", Thrift.MessageType.EXCEPTION, seqid);
            }
            result_obj.write(output);
            output.writeMessageEnd();
            output.flush();
        });
    }
};
