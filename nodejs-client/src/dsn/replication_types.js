//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');


var ttypes = module.exports = {};
ttypes.app_status = {
    'AS_INVALID' : 0,
    'AS_AVAILABLE' : 1,
    'AS_CREATING' : 2,
    'AS_CREATE_FAILED' : 3,
    'AS_DROPPING' : 4,
    'AS_DROP_FAILED' : 5,
    'AS_DROPPED' : 6,
    'AS_RECALLING' : 7
};
var partition_configuration = module.exports.partition_configuration = function(args) {
    this.pid = null;
    this.ballot = null;
    this.max_replica_count = null;
    this.primary = null;
    this.secondaries = null;
    this.last_drops = null;
    this.last_committed_decree = null;
    if (args) {
        if (args.pid !== undefined && args.pid !== null) {
            this.pid = new base_ttypes.gpid(args.pid);
        }
        if (args.ballot !== undefined && args.ballot !== null) {
            this.ballot = args.ballot;
        }
        if (args.max_replica_count !== undefined && args.max_replica_count !== null) {
            this.max_replica_count = args.max_replica_count;
        }
        if (args.primary !== undefined && args.primary !== null) {
            this.primary = new base_ttypes.rpc_address(args.primary);
        }
        if (args.secondaries !== undefined && args.secondaries !== null) {
            this.secondaries = Thrift.copyList(args.secondaries, [base_ttypes.rpc_address]);
        }
        if (args.last_drops !== undefined && args.last_drops !== null) {
            this.last_drops = Thrift.copyList(args.last_drops, [base_ttypes.rpc_address]);
        }
        if (args.last_committed_decree !== undefined && args.last_committed_decree !== null) {
            this.last_committed_decree = args.last_committed_decree;
        }
    }
};
partition_configuration.prototype = {};
partition_configuration.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.pid = new base_ttypes.gpid();
                this.pid.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I64) {
                this.ballot = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.max_replica_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.STRUCT) {
                this.primary = new base_ttypes.rpc_address();
                this.primary.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.LIST) {
                var _size0 = 0;
                var _rtmp34;
                this.secondaries = [];
                var _etype3 = 0;
                _rtmp34 = input.readListBegin();
                _etype3 = _rtmp34.etype;
                _size0 = _rtmp34.size;
                for (var _i5 = 0; _i5 < _size0; ++_i5)
                {
                    var elem6 = null;
                    elem6 = new base_ttypes.rpc_address();
                    elem6.read(input);
                    this.secondaries.push(elem6);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.LIST) {
                var _size7 = 0;
                var _rtmp311;
                this.last_drops = [];
                var _etype10 = 0;
                _rtmp311 = input.readListBegin();
                _etype10 = _rtmp311.etype;
                _size7 = _rtmp311.size;
                for (var _i12 = 0; _i12 < _size7; ++_i12)
                {
                    var elem13 = null;
                    elem13 = new base_ttypes.rpc_address();
                    elem13.read(input);
                    this.last_drops.push(elem13);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 7:
            if (ftype == Thrift.Type.I64) {
                this.last_committed_decree = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

partition_configuration.prototype.write = function(output) {
    output.writeStructBegin('partition_configuration');
    if (this.pid !== null && this.pid !== undefined) {
        output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
        this.pid.write(output);
        output.writeFieldEnd();
    }
    if (this.ballot !== null && this.ballot !== undefined) {
        output.writeFieldBegin('ballot', Thrift.Type.I64, 2);
        output.writeI64(this.ballot);
        output.writeFieldEnd();
    }
    if (this.max_replica_count !== null && this.max_replica_count !== undefined) {
        output.writeFieldBegin('max_replica_count', Thrift.Type.I32, 3);
        output.writeI32(this.max_replica_count);
        output.writeFieldEnd();
    }
    if (this.primary !== null && this.primary !== undefined) {
        output.writeFieldBegin('primary', Thrift.Type.STRUCT, 4);
        this.primary.write(output);
        output.writeFieldEnd();
    }
    if (this.secondaries !== null && this.secondaries !== undefined) {
        output.writeFieldBegin('secondaries', Thrift.Type.LIST, 5);
        output.writeListBegin(Thrift.Type.STRUCT, this.secondaries.length);
        for (var iter14 in this.secondaries)
        {
            if (this.secondaries.hasOwnProperty(iter14))
            {
                iter14 = this.secondaries[iter14];
                iter14.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.last_drops !== null && this.last_drops !== undefined) {
        output.writeFieldBegin('last_drops', Thrift.Type.LIST, 6);
        output.writeListBegin(Thrift.Type.STRUCT, this.last_drops.length);
        for (var iter15 in this.last_drops)
        {
            if (this.last_drops.hasOwnProperty(iter15))
            {
                iter15 = this.last_drops[iter15];
                iter15.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.last_committed_decree !== null && this.last_committed_decree !== undefined) {
        output.writeFieldBegin('last_committed_decree', Thrift.Type.I64, 7);
        output.writeI64(this.last_committed_decree);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var query_cfg_request = module.exports.query_cfg_request = function(args) {
    this.app_name = null;
    this.partition_indices = null;
    if (args) {
        if (args.app_name !== undefined && args.app_name !== null) {
            this.app_name = args.app_name;
        }
        if (args.partition_indices !== undefined && args.partition_indices !== null) {
            this.partition_indices = Thrift.copyList(args.partition_indices, [null]);
        }
    }
};
query_cfg_request.prototype = {};
query_cfg_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRING) {
                this.app_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size16 = 0;
                var _rtmp320;
                this.partition_indices = [];
                var _etype19 = 0;
                _rtmp320 = input.readListBegin();
                _etype19 = _rtmp320.etype;
                _size16 = _rtmp320.size;
                for (var _i21 = 0; _i21 < _size16; ++_i21)
                {
                    var elem22 = null;
                    elem22 = input.readI32();
                    this.partition_indices.push(elem22);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

query_cfg_request.prototype.write = function(output) {
    output.writeStructBegin('query_cfg_request');
    if (this.app_name !== null && this.app_name !== undefined) {
        output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
        output.writeString(this.app_name);
        output.writeFieldEnd();
    }
    if (this.partition_indices !== null && this.partition_indices !== undefined) {
        output.writeFieldBegin('partition_indices', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.I32, this.partition_indices.length);
        for (var iter23 in this.partition_indices)
        {
            if (this.partition_indices.hasOwnProperty(iter23))
            {
                iter23 = this.partition_indices[iter23];
                output.writeI32(iter23);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var query_cfg_response = module.exports.query_cfg_response = function(args) {
    this.err = null;
    this.app_id = null;
    this.partition_count = null;
    this.is_stateful = null;
    this.partitions = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_count !== undefined && args.partition_count !== null) {
            this.partition_count = args.partition_count;
        }
        if (args.is_stateful !== undefined && args.is_stateful !== null) {
            this.is_stateful = args.is_stateful;
        }
        if (args.partitions !== undefined && args.partitions !== null) {
            this.partitions = Thrift.copyList(args.partitions, [ttypes.partition_configuration]);
        }
    }
};
query_cfg_response.prototype = {};
query_cfg_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I32) {
                this.partition_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.BOOL) {
                this.is_stateful = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.LIST) {
                var _size24 = 0;
                var _rtmp328;
                this.partitions = [];
                var _etype27 = 0;
                _rtmp328 = input.readListBegin();
                _etype27 = _rtmp328.etype;
                _size24 = _rtmp328.size;
                for (var _i29 = 0; _i29 < _size24; ++_i29)
                {
                    var elem30 = null;
                    elem30 = new ttypes.partition_configuration();
                    elem30.read(input);
                    this.partitions.push(elem30);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

query_cfg_response.prototype.write = function(output) {
    output.writeStructBegin('query_cfg_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 2);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_count !== null && this.partition_count !== undefined) {
        output.writeFieldBegin('partition_count', Thrift.Type.I32, 3);
        output.writeI32(this.partition_count);
        output.writeFieldEnd();
    }
    if (this.is_stateful !== null && this.is_stateful !== undefined) {
        output.writeFieldBegin('is_stateful', Thrift.Type.BOOL, 4);
        output.writeBool(this.is_stateful);
        output.writeFieldEnd();
    }
    if (this.partitions !== null && this.partitions !== undefined) {
        output.writeFieldBegin('partitions', Thrift.Type.LIST, 5);
        output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
        for (var iter31 in this.partitions)
        {
            if (this.partitions.hasOwnProperty(iter31))
            {
                iter31 = this.partitions[iter31];
                iter31.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var app_info = module.exports.app_info = function(args) {
    this.status = 0;
    this.app_type = null;
    this.app_name = null;
    this.app_id = null;
    this.partition_count = null;
    this.envs = null;
    this.is_stateful = null;
    this.max_replica_count = null;
    this.expire_second = null;
    if (args) {
        if (args.status !== undefined && args.status !== null) {
            this.status = args.status;
        }
        if (args.app_type !== undefined && args.app_type !== null) {
            this.app_type = args.app_type;
        }
        if (args.app_name !== undefined && args.app_name !== null) {
            this.app_name = args.app_name;
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.partition_count !== undefined && args.partition_count !== null) {
            this.partition_count = args.partition_count;
        }
        if (args.envs !== undefined && args.envs !== null) {
            this.envs = Thrift.copyMap(args.envs, [null]);
        }
        if (args.is_stateful !== undefined && args.is_stateful !== null) {
            this.is_stateful = args.is_stateful;
        }
        if (args.max_replica_count !== undefined && args.max_replica_count !== null) {
            this.max_replica_count = args.max_replica_count;
        }
        if (args.expire_second !== undefined && args.expire_second !== null) {
            this.expire_second = args.expire_second;
        }
    }
};
app_info.prototype = {};
app_info.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.status = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRING) {
                this.app_type = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.STRING) {
                this.app_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I32) {
                this.partition_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.MAP) {
                var _size32 = 0;
                var _rtmp336;
                this.envs = {};
                var _ktype33 = 0;
                var _vtype34 = 0;
                _rtmp336 = input.readMapBegin();
                _ktype33 = _rtmp336.ktype;
                _vtype34 = _rtmp336.vtype;
                _size32 = _rtmp336.size;
                for (var _i37 = 0; _i37 < _size32; ++_i37)
                {
                    var key38 = null;
                    var val39 = null;
                    key38 = input.readString();
                    val39 = input.readString();
                    this.envs[key38] = val39;
                }
                input.readMapEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 7:
            if (ftype == Thrift.Type.BOOL) {
                this.is_stateful = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 8:
            if (ftype == Thrift.Type.I32) {
                this.max_replica_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 9:
            if (ftype == Thrift.Type.I64) {
                this.expire_second = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

app_info.prototype.write = function(output) {
    output.writeStructBegin('app_info');
    if (this.status !== null && this.status !== undefined) {
        output.writeFieldBegin('status', Thrift.Type.I32, 1);
        output.writeI32(this.status);
        output.writeFieldEnd();
    }
    if (this.app_type !== null && this.app_type !== undefined) {
        output.writeFieldBegin('app_type', Thrift.Type.STRING, 2);
        output.writeString(this.app_type);
        output.writeFieldEnd();
    }
    if (this.app_name !== null && this.app_name !== undefined) {
        output.writeFieldBegin('app_name', Thrift.Type.STRING, 3);
        output.writeString(this.app_name);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 4);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.partition_count !== null && this.partition_count !== undefined) {
        output.writeFieldBegin('partition_count', Thrift.Type.I32, 5);
        output.writeI32(this.partition_count);
        output.writeFieldEnd();
    }
    if (this.envs !== null && this.envs !== undefined) {
        output.writeFieldBegin('envs', Thrift.Type.MAP, 6);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envs));
        for (var kiter40 in this.envs)
        {
            if (this.envs.hasOwnProperty(kiter40))
            {
                var viter41 = this.envs[kiter40];
                output.writeString(kiter40);
                output.writeString(viter41);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.is_stateful !== null && this.is_stateful !== undefined) {
        output.writeFieldBegin('is_stateful', Thrift.Type.BOOL, 7);
        output.writeBool(this.is_stateful);
        output.writeFieldEnd();
    }
    if (this.max_replica_count !== null && this.max_replica_count !== undefined) {
        output.writeFieldBegin('max_replica_count', Thrift.Type.I32, 8);
        output.writeI32(this.max_replica_count);
        output.writeFieldEnd();
    }
    if (this.expire_second !== null && this.expire_second !== undefined) {
        output.writeFieldBegin('expire_second', Thrift.Type.I64, 9);
        output.writeI64(this.expire_second);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var create_app_options = module.exports.create_app_options = function(args) {
    this.partition_count = null;
    this.replica_count = null;
    this.success_if_exist = null;
    this.app_type = null;
    this.is_stateful = null;
    this.envs = null;
    if (args) {
        if (args.partition_count !== undefined && args.partition_count !== null) {
            this.partition_count = args.partition_count;
        }
        if (args.replica_count !== undefined && args.replica_count !== null) {
            this.replica_count = args.replica_count;
        }
        if (args.success_if_exist !== undefined && args.success_if_exist !== null) {
            this.success_if_exist = args.success_if_exist;
        }
        if (args.app_type !== undefined && args.app_type !== null) {
            this.app_type = args.app_type;
        }
        if (args.is_stateful !== undefined && args.is_stateful !== null) {
            this.is_stateful = args.is_stateful;
        }
        if (args.envs !== undefined && args.envs !== null) {
            this.envs = Thrift.copyMap(args.envs, [null]);
        }
    }
};
create_app_options.prototype = {};
create_app_options.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.partition_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I32) {
                this.replica_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.BOOL) {
                this.success_if_exist = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.STRING) {
                this.app_type = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.BOOL) {
                this.is_stateful = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.MAP) {
                var _size42 = 0;
                var _rtmp346;
                this.envs = {};
                var _ktype43 = 0;
                var _vtype44 = 0;
                _rtmp346 = input.readMapBegin();
                _ktype43 = _rtmp346.ktype;
                _vtype44 = _rtmp346.vtype;
                _size42 = _rtmp346.size;
                for (var _i47 = 0; _i47 < _size42; ++_i47)
                {
                    var key48 = null;
                    var val49 = null;
                    key48 = input.readString();
                    val49 = input.readString();
                    this.envs[key48] = val49;
                }
                input.readMapEnd();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

create_app_options.prototype.write = function(output) {
    output.writeStructBegin('create_app_options');
    if (this.partition_count !== null && this.partition_count !== undefined) {
        output.writeFieldBegin('partition_count', Thrift.Type.I32, 1);
        output.writeI32(this.partition_count);
        output.writeFieldEnd();
    }
    if (this.replica_count !== null && this.replica_count !== undefined) {
        output.writeFieldBegin('replica_count', Thrift.Type.I32, 2);
        output.writeI32(this.replica_count);
        output.writeFieldEnd();
    }
    if (this.success_if_exist !== null && this.success_if_exist !== undefined) {
        output.writeFieldBegin('success_if_exist', Thrift.Type.BOOL, 3);
        output.writeBool(this.success_if_exist);
        output.writeFieldEnd();
    }
    if (this.app_type !== null && this.app_type !== undefined) {
        output.writeFieldBegin('app_type', Thrift.Type.STRING, 4);
        output.writeString(this.app_type);
        output.writeFieldEnd();
    }
    if (this.is_stateful !== null && this.is_stateful !== undefined) {
        output.writeFieldBegin('is_stateful', Thrift.Type.BOOL, 5);
        output.writeBool(this.is_stateful);
        output.writeFieldEnd();
    }
    if (this.envs !== null && this.envs !== undefined) {
        output.writeFieldBegin('envs', Thrift.Type.MAP, 6);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envs));
        for (var kiter50 in this.envs)
        {
            if (this.envs.hasOwnProperty(kiter50))
            {
                var viter51 = this.envs[kiter50];
                output.writeString(kiter50);
                output.writeString(viter51);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_create_app_request = module.exports.configuration_create_app_request = function(args) {
    this.app_name = null;
    this.options = null;
    if (args) {
        if (args.app_name !== undefined && args.app_name !== null) {
            this.app_name = args.app_name;
        }
        if (args.options !== undefined && args.options !== null) {
            this.options = new ttypes.create_app_options(args.options);
        }
    }
};
configuration_create_app_request.prototype = {};
configuration_create_app_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRING) {
                this.app_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRUCT) {
                this.options = new ttypes.create_app_options();
                this.options.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_create_app_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_create_app_request');
    if (this.app_name !== null && this.app_name !== undefined) {
        output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
        output.writeString(this.app_name);
        output.writeFieldEnd();
    }
    if (this.options !== null && this.options !== undefined) {
        output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
        this.options.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_create_app_response = module.exports.configuration_create_app_response = function(args) {
    this.err = null;
    this.appid = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.appid !== undefined && args.appid !== null) {
            this.appid = args.appid;
        }
    }
};
configuration_create_app_response.prototype = {};
configuration_create_app_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I32) {
                this.appid = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_create_app_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_create_app_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.appid !== null && this.appid !== undefined) {
        output.writeFieldBegin('appid', Thrift.Type.I32, 2);
        output.writeI32(this.appid);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var drop_app_options = module.exports.drop_app_options = function(args) {
    this.success_if_not_exist = null;
    this.reserve_seconds = null;
    if (args) {
        if (args.success_if_not_exist !== undefined && args.success_if_not_exist !== null) {
            this.success_if_not_exist = args.success_if_not_exist;
        }
        if (args.reserve_seconds !== undefined && args.reserve_seconds !== null) {
            this.reserve_seconds = args.reserve_seconds;
        }
    }
};
drop_app_options.prototype = {};
drop_app_options.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.BOOL) {
                this.success_if_not_exist = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I64) {
                this.reserve_seconds = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

drop_app_options.prototype.write = function(output) {
    output.writeStructBegin('drop_app_options');
    if (this.success_if_not_exist !== null && this.success_if_not_exist !== undefined) {
        output.writeFieldBegin('success_if_not_exist', Thrift.Type.BOOL, 1);
        output.writeBool(this.success_if_not_exist);
        output.writeFieldEnd();
    }
    if (this.reserve_seconds !== null && this.reserve_seconds !== undefined) {
        output.writeFieldBegin('reserve_seconds', Thrift.Type.I64, 2);
        output.writeI64(this.reserve_seconds);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_drop_app_request = module.exports.configuration_drop_app_request = function(args) {
    this.app_name = null;
    this.options = null;
    if (args) {
        if (args.app_name !== undefined && args.app_name !== null) {
            this.app_name = args.app_name;
        }
        if (args.options !== undefined && args.options !== null) {
            this.options = new ttypes.drop_app_options(args.options);
        }
    }
};
configuration_drop_app_request.prototype = {};
configuration_drop_app_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRING) {
                this.app_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRUCT) {
                this.options = new ttypes.drop_app_options();
                this.options.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_drop_app_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_drop_app_request');
    if (this.app_name !== null && this.app_name !== undefined) {
        output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
        output.writeString(this.app_name);
        output.writeFieldEnd();
    }
    if (this.options !== null && this.options !== undefined) {
        output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
        this.options.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_drop_app_response = module.exports.configuration_drop_app_response = function(args) {
    this.err = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
    }
};
configuration_drop_app_response.prototype = {};
configuration_drop_app_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_drop_app_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_drop_app_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_recall_app_request = module.exports.configuration_recall_app_request = function(args) {
    this.app_id = null;
    this.new_app_name = null;
    if (args) {
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.new_app_name !== undefined && args.new_app_name !== null) {
            this.new_app_name = args.new_app_name;
        }
    }
};
configuration_recall_app_request.prototype = {};
configuration_recall_app_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRING) {
                this.new_app_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_recall_app_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_recall_app_request');
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 1);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.new_app_name !== null && this.new_app_name !== undefined) {
        output.writeFieldBegin('new_app_name', Thrift.Type.STRING, 2);
        output.writeString(this.new_app_name);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_recall_app_response = module.exports.configuration_recall_app_response = function(args) {
    this.err = null;
    this.info = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.info !== undefined && args.info !== null) {
            this.info = new ttypes.app_info(args.info);
        }
    }
};
configuration_recall_app_response.prototype = {};
configuration_recall_app_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRUCT) {
                this.info = new ttypes.app_info();
                this.info.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_recall_app_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_recall_app_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.info !== null && this.info !== undefined) {
        output.writeFieldBegin('info', Thrift.Type.STRUCT, 2);
        this.info.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_modify_backup_policy_request = module.exports.configuration_modify_backup_policy_request = function(args) {
    this.policy_name = null;
    this.add_appids = null;
    this.removal_appids = null;
    this.new_backup_interval_sec = null;
    this.backup_history_count_to_keep = null;
    this.is_disable = null;
    this.start_time = null;
    if (args) {
        if (args.policy_name !== undefined && args.policy_name !== null) {
            this.policy_name = args.policy_name;
        }
        if (args.add_appids !== undefined && args.add_appids !== null) {
            this.add_appids = Thrift.copyList(args.add_appids, [null]);
        }
        if (args.removal_appids !== undefined && args.removal_appids !== null) {
            this.removal_appids = Thrift.copyList(args.removal_appids, [null]);
        }
        if (args.new_backup_interval_sec !== undefined && args.new_backup_interval_sec !== null) {
            this.new_backup_interval_sec = args.new_backup_interval_sec;
        }
        if (args.backup_history_count_to_keep !== undefined && args.backup_history_count_to_keep !== null) {
            this.backup_history_count_to_keep = args.backup_history_count_to_keep;
        }
        if (args.is_disable !== undefined && args.is_disable !== null) {
            this.is_disable = args.is_disable;
        }
        if (args.start_time !== undefined && args.start_time !== null) {
            this.start_time = args.start_time;
        }
    }
};
configuration_modify_backup_policy_request.prototype = {};
configuration_modify_backup_policy_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRING) {
                this.policy_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size52 = 0;
                var _rtmp356;
                this.add_appids = [];
                var _etype55 = 0;
                _rtmp356 = input.readListBegin();
                _etype55 = _rtmp356.etype;
                _size52 = _rtmp356.size;
                for (var _i57 = 0; _i57 < _size52; ++_i57)
                {
                    var elem58 = null;
                    elem58 = input.readI32();
                    this.add_appids.push(elem58);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.LIST) {
                var _size59 = 0;
                var _rtmp363;
                this.removal_appids = [];
                var _etype62 = 0;
                _rtmp363 = input.readListBegin();
                _etype62 = _rtmp363.etype;
                _size59 = _rtmp363.size;
                for (var _i64 = 0; _i64 < _size59; ++_i64)
                {
                    var elem65 = null;
                    elem65 = input.readI32();
                    this.removal_appids.push(elem65);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I64) {
                this.new_backup_interval_sec = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I32) {
                this.backup_history_count_to_keep = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.BOOL) {
                this.is_disable = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        case 7:
            if (ftype == Thrift.Type.STRING) {
                this.start_time = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_modify_backup_policy_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_modify_backup_policy_request');
    if (this.policy_name !== null && this.policy_name !== undefined) {
        output.writeFieldBegin('policy_name', Thrift.Type.STRING, 1);
        output.writeString(this.policy_name);
        output.writeFieldEnd();
    }
    if (this.add_appids !== null && this.add_appids !== undefined) {
        output.writeFieldBegin('add_appids', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.I32, this.add_appids.length);
        for (var iter66 in this.add_appids)
        {
            if (this.add_appids.hasOwnProperty(iter66))
            {
                iter66 = this.add_appids[iter66];
                output.writeI32(iter66);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.removal_appids !== null && this.removal_appids !== undefined) {
        output.writeFieldBegin('removal_appids', Thrift.Type.LIST, 3);
        output.writeListBegin(Thrift.Type.I32, this.removal_appids.length);
        for (var iter67 in this.removal_appids)
        {
            if (this.removal_appids.hasOwnProperty(iter67))
            {
                iter67 = this.removal_appids[iter67];
                output.writeI32(iter67);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.new_backup_interval_sec !== null && this.new_backup_interval_sec !== undefined) {
        output.writeFieldBegin('new_backup_interval_sec', Thrift.Type.I64, 4);
        output.writeI64(this.new_backup_interval_sec);
        output.writeFieldEnd();
    }
    if (this.backup_history_count_to_keep !== null && this.backup_history_count_to_keep !== undefined) {
        output.writeFieldBegin('backup_history_count_to_keep', Thrift.Type.I32, 5);
        output.writeI32(this.backup_history_count_to_keep);
        output.writeFieldEnd();
    }
    if (this.is_disable !== null && this.is_disable !== undefined) {
        output.writeFieldBegin('is_disable', Thrift.Type.BOOL, 6);
        output.writeBool(this.is_disable);
        output.writeFieldEnd();
    }
    if (this.start_time !== null && this.start_time !== undefined) {
        output.writeFieldBegin('start_time', Thrift.Type.STRING, 7);
        output.writeString(this.start_time);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_modify_backup_policy_response = module.exports.configuration_modify_backup_policy_response = function(args) {
    this.err = null;
    this.hint_message = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.hint_message !== undefined && args.hint_message !== null) {
            this.hint_message = args.hint_message;
        }
    }
};
configuration_modify_backup_policy_response.prototype = {};
configuration_modify_backup_policy_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRING) {
                this.hint_message = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_modify_backup_policy_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_modify_backup_policy_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.hint_message !== null && this.hint_message !== undefined) {
        output.writeFieldBegin('hint_message', Thrift.Type.STRING, 2);
        output.writeString(this.hint_message);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_add_backup_policy_request = module.exports.configuration_add_backup_policy_request = function(args) {
    this.backup_provider_type = null;
    this.policy_name = null;
    this.app_ids = null;
    this.backup_interval_seconds = null;
    this.backup_history_count_to_keep = null;
    this.start_time = null;
    if (args) {
        if (args.backup_provider_type !== undefined && args.backup_provider_type !== null) {
            this.backup_provider_type = args.backup_provider_type;
        }
        if (args.policy_name !== undefined && args.policy_name !== null) {
            this.policy_name = args.policy_name;
        }
        if (args.app_ids !== undefined && args.app_ids !== null) {
            this.app_ids = Thrift.copyList(args.app_ids, [null]);
        }
        if (args.backup_interval_seconds !== undefined && args.backup_interval_seconds !== null) {
            this.backup_interval_seconds = args.backup_interval_seconds;
        }
        if (args.backup_history_count_to_keep !== undefined && args.backup_history_count_to_keep !== null) {
            this.backup_history_count_to_keep = args.backup_history_count_to_keep;
        }
        if (args.start_time !== undefined && args.start_time !== null) {
            this.start_time = args.start_time;
        }
    }
};
configuration_add_backup_policy_request.prototype = {};
configuration_add_backup_policy_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRING) {
                this.backup_provider_type = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRING) {
                this.policy_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.LIST) {
                var _size68 = 0;
                var _rtmp372;
                this.app_ids = [];
                var _etype71 = 0;
                _rtmp372 = input.readListBegin();
                _etype71 = _rtmp372.etype;
                _size68 = _rtmp372.size;
                for (var _i73 = 0; _i73 < _size68; ++_i73)
                {
                    var elem74 = null;
                    elem74 = input.readI32();
                    this.app_ids.push(elem74);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.I64) {
                this.backup_interval_seconds = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I32) {
                this.backup_history_count_to_keep = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.start_time = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_add_backup_policy_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_add_backup_policy_request');
    if (this.backup_provider_type !== null && this.backup_provider_type !== undefined) {
        output.writeFieldBegin('backup_provider_type', Thrift.Type.STRING, 1);
        output.writeString(this.backup_provider_type);
        output.writeFieldEnd();
    }
    if (this.policy_name !== null && this.policy_name !== undefined) {
        output.writeFieldBegin('policy_name', Thrift.Type.STRING, 2);
        output.writeString(this.policy_name);
        output.writeFieldEnd();
    }
    if (this.app_ids !== null && this.app_ids !== undefined) {
        output.writeFieldBegin('app_ids', Thrift.Type.LIST, 3);
        output.writeListBegin(Thrift.Type.I32, this.app_ids.length);
        for (var iter75 in this.app_ids)
        {
            if (this.app_ids.hasOwnProperty(iter75))
            {
                iter75 = this.app_ids[iter75];
                output.writeI32(iter75);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.backup_interval_seconds !== null && this.backup_interval_seconds !== undefined) {
        output.writeFieldBegin('backup_interval_seconds', Thrift.Type.I64, 4);
        output.writeI64(this.backup_interval_seconds);
        output.writeFieldEnd();
    }
    if (this.backup_history_count_to_keep !== null && this.backup_history_count_to_keep !== undefined) {
        output.writeFieldBegin('backup_history_count_to_keep', Thrift.Type.I32, 5);
        output.writeI32(this.backup_history_count_to_keep);
        output.writeFieldEnd();
    }
    if (this.start_time !== null && this.start_time !== undefined) {
        output.writeFieldBegin('start_time', Thrift.Type.STRING, 6);
        output.writeString(this.start_time);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_add_backup_policy_response = module.exports.configuration_add_backup_policy_response = function(args) {
    this.err = null;
    this.hint_message = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.hint_message !== undefined && args.hint_message !== null) {
            this.hint_message = args.hint_message;
        }
    }
};
configuration_add_backup_policy_response.prototype = {};
configuration_add_backup_policy_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRING) {
                this.hint_message = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_add_backup_policy_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_add_backup_policy_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.hint_message !== null && this.hint_message !== undefined) {
        output.writeFieldBegin('hint_message', Thrift.Type.STRING, 2);
        output.writeString(this.hint_message);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var policy_entry = module.exports.policy_entry = function(args) {
    this.policy_name = null;
    this.backup_provider_type = null;
    this.backup_interval_seconds = null;
    this.app_ids = null;
    this.backup_history_count_to_keep = null;
    this.start_time = null;
    this.is_disable = null;
    if (args) {
        if (args.policy_name !== undefined && args.policy_name !== null) {
            this.policy_name = args.policy_name;
        }
        if (args.backup_provider_type !== undefined && args.backup_provider_type !== null) {
            this.backup_provider_type = args.backup_provider_type;
        }
        if (args.backup_interval_seconds !== undefined && args.backup_interval_seconds !== null) {
            this.backup_interval_seconds = args.backup_interval_seconds;
        }
        if (args.app_ids !== undefined && args.app_ids !== null) {
            this.app_ids = Thrift.copyList(args.app_ids, [null]);
        }
        if (args.backup_history_count_to_keep !== undefined && args.backup_history_count_to_keep !== null) {
            this.backup_history_count_to_keep = args.backup_history_count_to_keep;
        }
        if (args.start_time !== undefined && args.start_time !== null) {
            this.start_time = args.start_time;
        }
        if (args.is_disable !== undefined && args.is_disable !== null) {
            this.is_disable = args.is_disable;
        }
    }
};
policy_entry.prototype = {};
policy_entry.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRING) {
                this.policy_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRING) {
                this.backup_provider_type = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.STRING) {
                this.backup_interval_seconds = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.SET) {
                var _size76 = 0;
                var _rtmp380;
                this.app_ids = [];
                var _etype79 = 0;
                _rtmp380 = input.readSetBegin();
                _etype79 = _rtmp380.etype;
                _size76 = _rtmp380.size;
                for (var _i81 = 0; _i81 < _size76; ++_i81)
                {
                    var elem82 = null;
                    elem82 = input.readI32();
                    this.app_ids.push(elem82);
                }
                input.readSetEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I32) {
                this.backup_history_count_to_keep = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.start_time = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 7:
            if (ftype == Thrift.Type.BOOL) {
                this.is_disable = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

policy_entry.prototype.write = function(output) {
    output.writeStructBegin('policy_entry');
    if (this.policy_name !== null && this.policy_name !== undefined) {
        output.writeFieldBegin('policy_name', Thrift.Type.STRING, 1);
        output.writeString(this.policy_name);
        output.writeFieldEnd();
    }
    if (this.backup_provider_type !== null && this.backup_provider_type !== undefined) {
        output.writeFieldBegin('backup_provider_type', Thrift.Type.STRING, 2);
        output.writeString(this.backup_provider_type);
        output.writeFieldEnd();
    }
    if (this.backup_interval_seconds !== null && this.backup_interval_seconds !== undefined) {
        output.writeFieldBegin('backup_interval_seconds', Thrift.Type.STRING, 3);
        output.writeString(this.backup_interval_seconds);
        output.writeFieldEnd();
    }
    if (this.app_ids !== null && this.app_ids !== undefined) {
        output.writeFieldBegin('app_ids', Thrift.Type.SET, 4);
        output.writeSetBegin(Thrift.Type.I32, this.app_ids.length);
        for (var iter83 in this.app_ids)
        {
            if (this.app_ids.hasOwnProperty(iter83))
            {
                iter83 = this.app_ids[iter83];
                output.writeI32(iter83);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    if (this.backup_history_count_to_keep !== null && this.backup_history_count_to_keep !== undefined) {
        output.writeFieldBegin('backup_history_count_to_keep', Thrift.Type.I32, 5);
        output.writeI32(this.backup_history_count_to_keep);
        output.writeFieldEnd();
    }
    if (this.start_time !== null && this.start_time !== undefined) {
        output.writeFieldBegin('start_time', Thrift.Type.STRING, 6);
        output.writeString(this.start_time);
        output.writeFieldEnd();
    }
    if (this.is_disable !== null && this.is_disable !== undefined) {
        output.writeFieldBegin('is_disable', Thrift.Type.BOOL, 7);
        output.writeBool(this.is_disable);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var backup_entry = module.exports.backup_entry = function(args) {
    this.backup_id = null;
    this.start_time_ms = null;
    this.end_time_ms = null;
    this.app_ids = null;
    if (args) {
        if (args.backup_id !== undefined && args.backup_id !== null) {
            this.backup_id = args.backup_id;
        }
        if (args.start_time_ms !== undefined && args.start_time_ms !== null) {
            this.start_time_ms = args.start_time_ms;
        }
        if (args.end_time_ms !== undefined && args.end_time_ms !== null) {
            this.end_time_ms = args.end_time_ms;
        }
        if (args.app_ids !== undefined && args.app_ids !== null) {
            this.app_ids = Thrift.copyList(args.app_ids, [null]);
        }
    }
};
backup_entry.prototype = {};
backup_entry.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I64) {
                this.backup_id = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I64) {
                this.start_time_ms = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I64) {
                this.end_time_ms = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.SET) {
                var _size84 = 0;
                var _rtmp388;
                this.app_ids = [];
                var _etype87 = 0;
                _rtmp388 = input.readSetBegin();
                _etype87 = _rtmp388.etype;
                _size84 = _rtmp388.size;
                for (var _i89 = 0; _i89 < _size84; ++_i89)
                {
                    var elem90 = null;
                    elem90 = input.readI32();
                    this.app_ids.push(elem90);
                }
                input.readSetEnd();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

backup_entry.prototype.write = function(output) {
    output.writeStructBegin('backup_entry');
    if (this.backup_id !== null && this.backup_id !== undefined) {
        output.writeFieldBegin('backup_id', Thrift.Type.I64, 1);
        output.writeI64(this.backup_id);
        output.writeFieldEnd();
    }
    if (this.start_time_ms !== null && this.start_time_ms !== undefined) {
        output.writeFieldBegin('start_time_ms', Thrift.Type.I64, 2);
        output.writeI64(this.start_time_ms);
        output.writeFieldEnd();
    }
    if (this.end_time_ms !== null && this.end_time_ms !== undefined) {
        output.writeFieldBegin('end_time_ms', Thrift.Type.I64, 3);
        output.writeI64(this.end_time_ms);
        output.writeFieldEnd();
    }
    if (this.app_ids !== null && this.app_ids !== undefined) {
        output.writeFieldBegin('app_ids', Thrift.Type.SET, 4);
        output.writeSetBegin(Thrift.Type.I32, this.app_ids.length);
        for (var iter91 in this.app_ids)
        {
            if (this.app_ids.hasOwnProperty(iter91))
            {
                iter91 = this.app_ids[iter91];
                output.writeI32(iter91);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_query_backup_policy_request = module.exports.configuration_query_backup_policy_request = function(args) {
    this.policy_names = null;
    this.backup_info_count = null;
    if (args) {
        if (args.policy_names !== undefined && args.policy_names !== null) {
            this.policy_names = Thrift.copyList(args.policy_names, [null]);
        }
        if (args.backup_info_count !== undefined && args.backup_info_count !== null) {
            this.backup_info_count = args.backup_info_count;
        }
    }
};
configuration_query_backup_policy_request.prototype = {};
configuration_query_backup_policy_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.LIST) {
                var _size92 = 0;
                var _rtmp396;
                this.policy_names = [];
                var _etype95 = 0;
                _rtmp396 = input.readListBegin();
                _etype95 = _rtmp396.etype;
                _size92 = _rtmp396.size;
                for (var _i97 = 0; _i97 < _size92; ++_i97)
                {
                    var elem98 = null;
                    elem98 = input.readString();
                    this.policy_names.push(elem98);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.I32) {
                this.backup_info_count = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_query_backup_policy_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_query_backup_policy_request');
    if (this.policy_names !== null && this.policy_names !== undefined) {
        output.writeFieldBegin('policy_names', Thrift.Type.LIST, 1);
        output.writeListBegin(Thrift.Type.STRING, this.policy_names.length);
        for (var iter99 in this.policy_names)
        {
            if (this.policy_names.hasOwnProperty(iter99))
            {
                iter99 = this.policy_names[iter99];
                output.writeString(iter99);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.backup_info_count !== null && this.backup_info_count !== undefined) {
        output.writeFieldBegin('backup_info_count', Thrift.Type.I32, 2);
        output.writeI32(this.backup_info_count);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_query_backup_policy_response = module.exports.configuration_query_backup_policy_response = function(args) {
    this.err = null;
    this.policys = null;
    this.backup_infos = null;
    this.hint_msg = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.policys !== undefined && args.policys !== null) {
            this.policys = Thrift.copyList(args.policys, [ttypes.policy_entry]);
        }
        if (args.backup_infos !== undefined && args.backup_infos !== null) {
            this.backup_infos = Thrift.copyList(args.backup_infos, [Thrift.copyList, ttypes.backup_entry]);
        }
        if (args.hint_msg !== undefined && args.hint_msg !== null) {
            this.hint_msg = args.hint_msg;
        }
    }
};
configuration_query_backup_policy_response.prototype = {};
configuration_query_backup_policy_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size100 = 0;
                var _rtmp3104;
                this.policys = [];
                var _etype103 = 0;
                _rtmp3104 = input.readListBegin();
                _etype103 = _rtmp3104.etype;
                _size100 = _rtmp3104.size;
                for (var _i105 = 0; _i105 < _size100; ++_i105)
                {
                    var elem106 = null;
                    elem106 = new ttypes.policy_entry();
                    elem106.read(input);
                    this.policys.push(elem106);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.LIST) {
                var _size107 = 0;
                var _rtmp3111;
                this.backup_infos = [];
                var _etype110 = 0;
                _rtmp3111 = input.readListBegin();
                _etype110 = _rtmp3111.etype;
                _size107 = _rtmp3111.size;
                for (var _i112 = 0; _i112 < _size107; ++_i112)
                {
                    var elem113 = null;
                    var _size114 = 0;
                    var _rtmp3118;
                    elem113 = [];
                    var _etype117 = 0;
                    _rtmp3118 = input.readListBegin();
                    _etype117 = _rtmp3118.etype;
                    _size114 = _rtmp3118.size;
                    for (var _i119 = 0; _i119 < _size114; ++_i119)
                    {
                        var elem120 = null;
                        elem120 = new ttypes.backup_entry();
                        elem120.read(input);
                        elem113.push(elem120);
                    }
                    input.readListEnd();
                    this.backup_infos.push(elem113);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.STRING) {
                this.hint_msg = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_query_backup_policy_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_query_backup_policy_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.policys !== null && this.policys !== undefined) {
        output.writeFieldBegin('policys', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.policys.length);
        for (var iter121 in this.policys)
        {
            if (this.policys.hasOwnProperty(iter121))
            {
                iter121 = this.policys[iter121];
                iter121.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.backup_infos !== null && this.backup_infos !== undefined) {
        output.writeFieldBegin('backup_infos', Thrift.Type.LIST, 3);
        output.writeListBegin(Thrift.Type.LIST, this.backup_infos.length);
        for (var iter122 in this.backup_infos)
        {
            if (this.backup_infos.hasOwnProperty(iter122))
            {
                iter122 = this.backup_infos[iter122];
                output.writeListBegin(Thrift.Type.STRUCT, iter122.length);
                for (var iter123 in iter122)
                {
                    if (iter122.hasOwnProperty(iter123))
                    {
                        iter123 = iter122[iter123];
                        iter123.write(output);
                    }
                }
                output.writeListEnd();
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.hint_msg !== null && this.hint_msg !== undefined) {
        output.writeFieldBegin('hint_msg', Thrift.Type.STRING, 4);
        output.writeString(this.hint_msg);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_restore_request = module.exports.configuration_restore_request = function(args) {
    this.cluster_name = null;
    this.policy_name = null;
    this.time_stamp = null;
    this.app_name = null;
    this.app_id = null;
    this.new_app_name = null;
    this.backup_provider_name = null;
    this.skip_bad_partition = null;
    if (args) {
        if (args.cluster_name !== undefined && args.cluster_name !== null) {
            this.cluster_name = args.cluster_name;
        }
        if (args.policy_name !== undefined && args.policy_name !== null) {
            this.policy_name = args.policy_name;
        }
        if (args.time_stamp !== undefined && args.time_stamp !== null) {
            this.time_stamp = args.time_stamp;
        }
        if (args.app_name !== undefined && args.app_name !== null) {
            this.app_name = args.app_name;
        }
        if (args.app_id !== undefined && args.app_id !== null) {
            this.app_id = args.app_id;
        }
        if (args.new_app_name !== undefined && args.new_app_name !== null) {
            this.new_app_name = args.new_app_name;
        }
        if (args.backup_provider_name !== undefined && args.backup_provider_name !== null) {
            this.backup_provider_name = args.backup_provider_name;
        }
        if (args.skip_bad_partition !== undefined && args.skip_bad_partition !== null) {
            this.skip_bad_partition = args.skip_bad_partition;
        }
    }
};
configuration_restore_request.prototype = {};
configuration_restore_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRING) {
                this.cluster_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.STRING) {
                this.policy_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.I64) {
                this.time_stamp = input.readI64();
            } else {
                input.skip(ftype);
            }
            break;
        case 4:
            if (ftype == Thrift.Type.STRING) {
                this.app_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 5:
            if (ftype == Thrift.Type.I32) {
                this.app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 6:
            if (ftype == Thrift.Type.STRING) {
                this.new_app_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 7:
            if (ftype == Thrift.Type.STRING) {
                this.backup_provider_name = input.readString();
            } else {
                input.skip(ftype);
            }
            break;
        case 8:
            if (ftype == Thrift.Type.BOOL) {
                this.skip_bad_partition = input.readBool();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_restore_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_restore_request');
    if (this.cluster_name !== null && this.cluster_name !== undefined) {
        output.writeFieldBegin('cluster_name', Thrift.Type.STRING, 1);
        output.writeString(this.cluster_name);
        output.writeFieldEnd();
    }
    if (this.policy_name !== null && this.policy_name !== undefined) {
        output.writeFieldBegin('policy_name', Thrift.Type.STRING, 2);
        output.writeString(this.policy_name);
        output.writeFieldEnd();
    }
    if (this.time_stamp !== null && this.time_stamp !== undefined) {
        output.writeFieldBegin('time_stamp', Thrift.Type.I64, 3);
        output.writeI64(this.time_stamp);
        output.writeFieldEnd();
    }
    if (this.app_name !== null && this.app_name !== undefined) {
        output.writeFieldBegin('app_name', Thrift.Type.STRING, 4);
        output.writeString(this.app_name);
        output.writeFieldEnd();
    }
    if (this.app_id !== null && this.app_id !== undefined) {
        output.writeFieldBegin('app_id', Thrift.Type.I32, 5);
        output.writeI32(this.app_id);
        output.writeFieldEnd();
    }
    if (this.new_app_name !== null && this.new_app_name !== undefined) {
        output.writeFieldBegin('new_app_name', Thrift.Type.STRING, 6);
        output.writeString(this.new_app_name);
        output.writeFieldEnd();
    }
    if (this.backup_provider_name !== null && this.backup_provider_name !== undefined) {
        output.writeFieldBegin('backup_provider_name', Thrift.Type.STRING, 7);
        output.writeString(this.backup_provider_name);
        output.writeFieldEnd();
    }
    if (this.skip_bad_partition !== null && this.skip_bad_partition !== undefined) {
        output.writeFieldBegin('skip_bad_partition', Thrift.Type.BOOL, 8);
        output.writeBool(this.skip_bad_partition);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_query_restore_request = module.exports.configuration_query_restore_request = function(args) {
    this.restore_app_id = null;
    if (args) {
        if (args.restore_app_id !== undefined && args.restore_app_id !== null) {
            this.restore_app_id = args.restore_app_id;
        }
    }
};
configuration_query_restore_request.prototype = {};
configuration_query_restore_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.restore_app_id = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_query_restore_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_query_restore_request');
    if (this.restore_app_id !== null && this.restore_app_id !== undefined) {
        output.writeFieldBegin('restore_app_id', Thrift.Type.I32, 1);
        output.writeI32(this.restore_app_id);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_query_restore_response = module.exports.configuration_query_restore_response = function(args) {
    this.err = null;
    this.restore_status = null;
    this.restore_progress = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.restore_status !== undefined && args.restore_status !== null) {
            this.restore_status = Thrift.copyList(args.restore_status, [base_ttypes.error_code]);
        }
        if (args.restore_progress !== undefined && args.restore_progress !== null) {
            this.restore_progress = Thrift.copyList(args.restore_progress, [null]);
        }
    }
};
configuration_query_restore_response.prototype = {};
configuration_query_restore_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size124 = 0;
                var _rtmp3128;
                this.restore_status = [];
                var _etype127 = 0;
                _rtmp3128 = input.readListBegin();
                _etype127 = _rtmp3128.etype;
                _size124 = _rtmp3128.size;
                for (var _i129 = 0; _i129 < _size124; ++_i129)
                {
                    var elem130 = null;
                    elem130 = new base_ttypes.error_code();
                    elem130.read(input);
                    this.restore_status.push(elem130);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        case 3:
            if (ftype == Thrift.Type.LIST) {
                var _size131 = 0;
                var _rtmp3135;
                this.restore_progress = [];
                var _etype134 = 0;
                _rtmp3135 = input.readListBegin();
                _etype134 = _rtmp3135.etype;
                _size131 = _rtmp3135.size;
                for (var _i136 = 0; _i136 < _size131; ++_i136)
                {
                    var elem137 = null;
                    elem137 = input.readI32();
                    this.restore_progress.push(elem137);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_query_restore_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_query_restore_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.restore_status !== null && this.restore_status !== undefined) {
        output.writeFieldBegin('restore_status', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.restore_status.length);
        for (var iter138 in this.restore_status)
        {
            if (this.restore_status.hasOwnProperty(iter138))
            {
                iter138 = this.restore_status[iter138];
                iter138.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.restore_progress !== null && this.restore_progress !== undefined) {
        output.writeFieldBegin('restore_progress', Thrift.Type.LIST, 3);
        output.writeListBegin(Thrift.Type.I32, this.restore_progress.length);
        for (var iter139 in this.restore_progress)
        {
            if (this.restore_progress.hasOwnProperty(iter139))
            {
                iter139 = this.restore_progress[iter139];
                output.writeI32(iter139);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_list_apps_request = module.exports.configuration_list_apps_request = function(args) {
    this.status = 0;
    if (args) {
        if (args.status !== undefined && args.status !== null) {
            this.status = args.status;
        }
    }
};
configuration_list_apps_request.prototype = {};
configuration_list_apps_request.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.I32) {
                this.status = input.readI32();
            } else {
                input.skip(ftype);
            }
            break;
        case 0:
            input.skip(ftype);
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_list_apps_request.prototype.write = function(output) {
    output.writeStructBegin('configuration_list_apps_request');
    if (this.status !== null && this.status !== undefined) {
        output.writeFieldBegin('status', Thrift.Type.I32, 1);
        output.writeI32(this.status);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var configuration_list_apps_response = module.exports.configuration_list_apps_response = function(args) {
    this.err = null;
    this.infos = null;
    if (args) {
        if (args.err !== undefined && args.err !== null) {
            this.err = new base_ttypes.error_code(args.err);
        }
        if (args.infos !== undefined && args.infos !== null) {
            this.infos = Thrift.copyList(args.infos, [ttypes.app_info]);
        }
    }
};
configuration_list_apps_response.prototype = {};
configuration_list_apps_response.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == Thrift.Type.STRUCT) {
                this.err = new base_ttypes.error_code();
                this.err.read(input);
            } else {
                input.skip(ftype);
            }
            break;
        case 2:
            if (ftype == Thrift.Type.LIST) {
                var _size140 = 0;
                var _rtmp3144;
                this.infos = [];
                var _etype143 = 0;
                _rtmp3144 = input.readListBegin();
                _etype143 = _rtmp3144.etype;
                _size140 = _rtmp3144.size;
                for (var _i145 = 0; _i145 < _size140; ++_i145)
                {
                    var elem146 = null;
                    elem146 = new ttypes.app_info();
                    elem146.read(input);
                    this.infos.push(elem146);
                }
                input.readListEnd();
            } else {
                input.skip(ftype);
            }
            break;
        default:
            input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

configuration_list_apps_response.prototype.write = function(output) {
    output.writeStructBegin('configuration_list_apps_response');
    if (this.err !== null && this.err !== undefined) {
        output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
        this.err.write(output);
        output.writeFieldEnd();
    }
    if (this.infos !== null && this.infos !== undefined) {
        output.writeFieldBegin('infos', Thrift.Type.LIST, 2);
        output.writeListBegin(Thrift.Type.STRUCT, this.infos.length);
        for (var iter147 in this.infos)
        {
            if (this.infos.hasOwnProperty(iter147))
            {
                iter147 = this.infos[iter147];
                iter147.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

