# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
# Developer Notes:
#
# This config is for github actions. Before merging your changes of this file,
# it's recommended to create a PR against the ci-test branch to test if it works
# as expected.

name: Lint and Unit Test for Cpp

on:
  # run on each pull request
  pull_request:
    types: [ synchronize, opened, reopened ]
    branches:
      - master
      - 'v[0-9]+.*' # release branch
      - ci-test # testing branch for github action
      - '*dev'

  # for manually triggering workflow
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  cpp_clang_format_linter:
    name: Lint Cpp code
    runs-on: ubuntu-latest
    container:
      image: apache/pegasus:clang-format-3.9
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true
      - name: clang-format
        run: ./scripts/run-clang-format.py --clang-format-executable clang-format-3.9 -e ./src/shell/linenoise -e ./src/shell/sds -e ./thirdparty -r .

  test_rdsn_Release:
    name: Test rdsn with Release
    needs: cpp_clang_format_linter
    runs-on: ubuntu-latest
    container:
      image: apache/pegasus:thirdparties-bin-ubuntu1804
      env:
        CCACHE_DIR: /tmp/ccache/pegasus
        CCACHE_MAXSIZE: 10G
      volumes:
        # Place ccache compilation intermediate results in host memory, that's shared among containers.
        - /tmp/ccache/pegasus:/tmp/ccache/pegasus
      # Read docs at https://docs.docker.com/storage/tmpfs/ for more details of using tmpfs in docker.
      options: --mount type=tmpfs,destination=/tmp/pegasus --cap-add=SYS_PTRACE
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rdsn:
              - 'src/rdsn/**'
            thirdparty:
              - 'thirdparty/**'
      - name: Unpack prebuilt third-parties
        if: steps.changes.outputs.thirdparty == 'false'
        run: unzip /root/thirdparties-bin.zip -d ./thirdparty
      - name: Rebuild third-parties
        if: steps.changes.outputs.thirdparty == 'true'
        working-directory: thirdparty
        run: |
          mkdir build
          cmake -DCMAKE_BUILD_TYPE=Release -B build/
          cmake --build build/ -j $(($(nproc)/2+1))
      - name: Compilation and Unit Testing
        if: steps.changes.outputs.rdsn == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: |
          export LD_LIBRARY_PATH=`pwd`/thirdparty/output/lib:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server
          ulimit -s unlimited
          ./run.sh build -c --rdsn --test --skip_thirdparty -j $(($(nproc)/2+1))

  test_rdsn_ASAN:
    name: Test rdsn with ASAN
    needs: cpp_clang_format_linter
    runs-on: ubuntu-latest
    container:
      image: apache/pegasus:thirdparties-bin-ubuntu1804
      env:
        CCACHE_DIR: /tmp/ccache/pegasus
        CCACHE_MAXSIZE: 10G
      volumes:
        # Place ccache compilation intermediate results in host memory, that's shared among containers.
        - /tmp/ccache/pegasus:/tmp/ccache/pegasus
      # Read docs at https://docs.docker.com/storage/tmpfs/ for more details of using tmpfs in docker.
      options: --mount type=tmpfs,destination=/tmp/pegasus --cap-add=SYS_PTRACE
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rdsn:
              - 'src/rdsn/**'
            thirdparty:
              - 'thirdparty/**'
      - name: Unpack prebuilt third-parties
        if: steps.changes.outputs.thirdparty == 'false'
        run: unzip /root/thirdparties-bin.zip -d ./thirdparty
      - name: Rebuild third-parties
        if: steps.changes.outputs.thirdparty == 'true'
        working-directory: thirdparty
        run: |
          mkdir build
          cmake -DCMAKE_BUILD_TYPE=Release -B build/
          cmake --build build/ -j $(($(nproc)/2+1))
      - name: Compilation and Unit Testing
        if: steps.changes.outputs.rdsn == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: |
          export LD_LIBRARY_PATH=`pwd`/thirdparty/output/lib:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server
          ulimit -s unlimited
          ./run.sh build -c --rdsn --test --sanitizer address --skip_thirdparty --disable_gperf -j $(($(nproc)/2+1))

  test_rdsn_LSAN:
    name: Test rdsn with LSAN
    needs: cpp_clang_format_linter
    runs-on: ubuntu-latest
    container:
      image: apache/pegasus:thirdparties-bin-ubuntu1804
      env:
        CCACHE_DIR: /tmp/ccache/pegasus
        CCACHE_MAXSIZE: 10G
      volumes:
        # Place ccache compilation intermediate results in host memory, that's shared among containers.
        - /tmp/ccache/pegasus:/tmp/ccache/pegasus
      # Read docs at https://docs.docker.com/storage/tmpfs/ for more details of using tmpfs in docker.
      options: --mount type=tmpfs,destination=/tmp/pegasus --cap-add=SYS_PTRACE
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rdsn:
              - 'src/rdsn/**'
            thirdparty:
              - 'thirdparty/**'
      - name: Unpack prebuilt third-parties
        if: steps.changes.outputs.thirdparty == 'false'
        run: unzip /root/thirdparties-bin.zip -d ./thirdparty
      - name: Rebuild third-parties
        if: steps.changes.outputs.thirdparty == 'true'
        working-directory: thirdparty
        run: |
          mkdir build
          cmake -DCMAKE_BUILD_TYPE=Release -B build/
          cmake --build build/ -j $(($(nproc)/2+1))
      - name: Compilation and Unit Testing
        if: steps.changes.outputs.rdsn == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: |
          export LD_LIBRARY_PATH=`pwd`/thirdparty/output/lib:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server
          ulimit -s unlimited
          ./run.sh build -c --rdsn --test --sanitizer leak --skip_thirdparty --disable_gperf -j $(($(nproc)/2+1))

  test_rdsn_UBSAN:
    name: Test rdsn with UBSAN
    needs: cpp_clang_format_linter
    runs-on: ubuntu-latest
    container:
      image: apache/pegasus:thirdparties-bin-ubuntu1804
      env:
        CCACHE_DIR: /tmp/ccache/pegasus
        CCACHE_MAXSIZE: 10G
      volumes:
        # Place ccache compilation intermediate results in host memory, that's shared among containers.
        - /tmp/ccache/pegasus:/tmp/ccache/pegasus
      # Read docs at https://docs.docker.com/storage/tmpfs/ for more details of using tmpfs in docker.
      options: --mount type=tmpfs,destination=/tmp/pegasus --cap-add=SYS_PTRACE
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rdsn:
              - 'src/rdsn/**'
            thirdparty:
              - 'thirdparty/**'
      - name: Unpack prebuilt third-parties
        if: steps.changes.outputs.thirdparty == 'false'
        run: unzip /root/thirdparties-bin.zip -d ./thirdparty
      - name: Rebuild third-parties
        if: steps.changes.outputs.thirdparty == 'true'
        working-directory: thirdparty
        run: |
          mkdir build
          cmake -DCMAKE_BUILD_TYPE=Release -B build/
          cmake --build build/ -j $(($(nproc)/2+1))
      - name: Compilation and Unit Testing
        if: steps.changes.outputs.rdsn == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: |
          export LD_LIBRARY_PATH=`pwd`/thirdparty/output/lib:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server
          ulimit -s unlimited
          ./run.sh build -c --rdsn --test --sanitizer undefined --skip_thirdparty --disable_gperf -j $(($(nproc)/2+1))

  test_pegasus:
    name: Test Pegasus
    needs: cpp_clang_format_linter
    runs-on: ubuntu-latest
    container:
      image: apache/pegasus:thirdparties-bin-ubuntu1804
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            pegasus:
              - 'src/**'
            thirdparty:
              - 'thirdparty/**'
      - name: Unpack prebuilt third-parties
        if: steps.changes.outputs.thirdparty == 'false'
        run: unzip /root/thirdparties-bin.zip -d ./thirdparty
      - name: Rebuild third-parties
        if: steps.changes.outputs.thirdparty == 'true'
        working-directory: thirdparty
        run: |
          mkdir build
          cmake -DCMAKE_BUILD_TYPE=Release -B build/
          cmake --build build/ -j $(($(nproc)/2+1))
      - name: Compilation
        if: steps.changes.outputs.pegasus == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: ./run.sh build -c -j $(($(nproc)/2+1))
      - name: Packaging Server
        if: steps.changes.outputs.pegasus == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: ./run.sh pack_server
      - name: Packaging Tools
        if: steps.changes.outputs.pegasus == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: ./run.sh pack_tools
      - name: Unit Testing
        if: steps.changes.outputs.pegasus == 'true' || steps.changes.outputs.thirdparty == 'true'
        run: |
          source ./scripts/config_hdfs.sh
          ./run.sh test --on_travis
